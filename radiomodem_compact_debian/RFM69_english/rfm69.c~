#include "stm32f10x_conf.h"

#include "rfm69.h"

uint8_t packet_buffer[64], rfm69_condition, packet_size;

uint8_t nint=0, vasya = 0, catchafc1 = 0, catchafc2 = 0;


void EXTI9_5_IRQHandler(void)
{
	__disable_irq();
	++nint;

	vasya = rfm69_read(REGIRQFLAGS2);
	if( EXTI_GetFlagStatus(CRCOK_PKSent_Line) == SET )
	{
		switch(rfm69_condition)
		{
			case RFM69_SLEEP :
				rfm69_sleep();
				break;
			case RFM69_STBY :
				rfm69_stby();
				break;
			case RFM69_RX :
				if(rfm69_read(REGIRQFLAGS2) & (1<<PAYLOADREADY))
				{
					rfm69_receive_small_packet();
/*                    packet_buffer[packet_size++] = rfm69_read(REGIRQFLAGS1);
                    packet_buffer[packet_size++] = rfm69_read(REGIRQFLAGS2);
                    packet_buffer[packet_size++] = rfm69_read(REGOPMODE);
                    packet_buffer[packet_size++] = rfm69_condition;
                    packet_buffer[packet_size++] = rfm69_read(REGAFCMSB);
                    packet_buffer[packet_size++] = rfm69_read(REGAFCLSB); */
                    rfm69_stby();
					rfm69_clear_fifo();
					rfm69_condition = RFM69_NEW_PACK;
					++vasya;
				}
				break;
			case RFM69_TX :
				if(rfm69_read(REGIRQFLAGS2) & (1<<PACKETSENT))
				{
					rfm69_receive_start();
					++vasya;
				}
				break;
		}
		EXTI_ClearITPendingBit(CRCOK_PKSent_Line);
	}

	else if( EXTI_GetFlagStatus(FifoLevel_Line) == SET)
	{
		switch(rfm69_condition)
		{
			case RFM69_SLEEP :
				break;
			case RFM69_STBY :
				break;
			case RFM69_RX :
				break;
			case RFM69_TX :
				break;
		}

		EXTI_ClearITPendingBit(FifoLevel_Line);
	}

	else if( EXTI_GetFlagStatus(SyncAddr_Line) == SET)
	{
		switch(rfm69_condition)
		{
			case RFM69_SLEEP :
				rfm69_sleep();
				break;
			case RFM69_STBY :
				rfm69_stby();
				break;
			case RFM69_RX :
                catchafc1 = rfm69_read(REGFEIMSB);
                catchafc2 = rfm69_read(REGFEILSB);
                nint = 0xbb;
				break;
			case RFM69_TX :
				break;
		}
		EXTI_ClearITPendingBit(SyncAddr_Line);
	}
	__enable_irq();
}






void rfm69_write(uint8_t address, uint8_t data)
{
	__disable_irq();
	GPIO_ResetBits(NSS_Port, NSS_Pin);

    SPI_I2S_SendData(SPI1, (address | 0x80));  // Ð¾ÑÐ¿ÑÐ°Ð²Ð¸Ð»Ð¸ Ð°Ð´ÑÐµÑ
    while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð¾ÑÐ¿ÑÐ°Ð²ÑÑÑÑ

    SPI_I2S_SendData(SPI1, data);  // Ð¾ÑÐ¿ÑÐ°Ð²Ð¸Ð»Ð¸ Ð´Ð°Ð½Ð½ÑÐµ

    while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð¿ÑÐ¸Ð½
    data = SPI_I2S_ReceiveData(SPI1);  // Ð¿Ð¾Ð»ÑÑÐ¸Ð»Ð¸ Ð´Ð°Ð½Ð½ÑÐµ

    while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð¿ÑÐ¸Ð½
    data = SPI_I2S_ReceiveData(SPI1);  // Ð¿Ð¾Ð»ÑÑÐ¸Ð»Ð¸ Ð´Ð°Ð½Ð½ÑÐµ

	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° SPI Ð·Ð°Ð½ÑÑ
	GPIO_SetBits(NSS_Port, NSS_Pin);
	__enable_irq();
}


uint8_t rfm69_read(uint8_t address)
{
	uint8_t data = 0x00;

	__disable_irq();
	GPIO_ResetBits(NSS_Port, NSS_Pin);

    SPI_I2S_SendData(SPI1, (address));  // Ð¾ÑÐ¿ÑÐ°Ð²Ð¸Ð»Ð¸ Ð°Ð´ÑÐµÑ
    while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð¾ÑÐ¿Ñ

    SPI_I2S_SendData(SPI1, 0x87);  // Ð¾ÑÐ¿ÑÐ°Ð²Ð¸Ð»Ð¸ Ð´Ð°Ð½Ð½ÑÐµ

    while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð¿ÑÐ¸Ð½
    data = SPI_I2S_ReceiveData(SPI1);  // Ð¿Ð¾Ð»ÑÑÐ¸Ð»Ð¸ Ð´Ð°Ð½Ð½ÑÐµ

    while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð¿ÑÐ¸Ð½
    data = SPI_I2S_ReceiveData(SPI1);  // Ð¿Ð¾Ð»ÑÑÐ¸Ð»Ð¸ Ð´Ð°Ð½Ð½ÑÐµ

    while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° SPI Ð·Ð°Ð½ÑÑ
	GPIO_SetBits(NSS_Port, NSS_Pin);
	__enable_irq();

	return data;
}


void rfm69_write_burst(uint8_t address, uint8_t *data, uint8_t ndata)
{
	uint8_t i;

	__disable_irq();
	GPIO_ResetBits(NSS_Port, NSS_Pin);

    SPI_I2S_SendData(SPI1, (address | 0x80));  // Ð¾ÑÐ¿ÑÐ°Ð²Ð¸Ð»Ð¸ Ð°Ð´ÑÐµÑ

	for (i=0 ; i<ndata ; ++i)
	{
    	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð¾ÑÐ¿Ñ
		SPI_I2S_SendData(SPI1, data[i]);  // Ð¾ÑÐ¿ÑÐ°Ð²Ð¸Ð»Ð¸ Ð´Ð°Ð½Ð½ÑÐµ

    	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð¿ÑÐ¸Ð½
    	SPI_I2S_ReceiveData(SPI1);  // Ð¿Ð¾Ð»ÑÑÐ¸Ð»Ð¸ Ð´Ð°Ð½Ð½ÑÐµ
	}
    while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð¿ÑÐ¸Ð½
    SPI_I2S_ReceiveData(SPI1);  // Ð¿Ð¾Ð»ÑÑÐ¸Ð»Ð¸ Ð´Ð°Ð½Ð½ÑÐµ

	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° SPI Ð·Ð°Ð½ÑÑ
	GPIO_SetBits(NSS_Port, NSS_Pin);
	__enable_irq();
}


void rfm69_read_burst(uint8_t address, uint8_t *data, uint8_t ndata)
{
	uint8_t i;

	__disable_irq();
	GPIO_ResetBits(NSS_Port, NSS_Pin);

    SPI_I2S_SendData(SPI1, address);  // Ð¾ÑÐ¿ÑÐ°Ð²Ð¸Ð»Ð¸ Ð°Ð´ÑÐµÑ

	--ndata;
	for (i=0 ; i<ndata ; ++i)
	{
    	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð¾ÑÐ¿Ñ
		SPI_I2S_SendData(SPI1, 0x8e);  // Ð¾ÑÐ¿ÑÐ°Ð²Ð¸Ð»Ð¸ Ð´Ð°Ð½Ð½ÑÐµ

    	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð¿ÑÐ¸Ð½
    	data[i] = SPI_I2S_ReceiveData(SPI1);  // Ð¿Ð¾Ð»ÑÑÐ¸Ð»Ð¸ Ð´Ð°Ð½Ð½ÑÐµ
	}
    while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° Ð´Ð°Ð½Ð½ÑÐµ Ð½Ðµ Ð¿ÑÐ¸Ð½
    data[ndata] = SPI_I2S_ReceiveData(SPI1);  // Ð¿Ð¾Ð»ÑÑÐ¸Ð»Ð¸ Ð´Ð°Ð½Ð½ÑÐµ

	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET); // Ð¶Ð´ÑÐ¼, Ð¿Ð¾ÐºÐ° SPI Ð·Ð°Ð½ÑÑ
	GPIO_SetBits(NSS_Port, NSS_Pin);
	__enable_irq();
}


int rfm69_init(void)
{
	int j;

//	SPI initialization
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_SPI1, ENABLE);		// enable clock

	GPIO_InitTypeDef gpio;
	GPIO_StructInit(&gpio);
	gpio.GPIO_Pin = NSS_Pin;
	gpio.GPIO_Speed = GPIO_Speed_10MHz;
	gpio.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(NSS_Port, &gpio);

	GPIO_StructInit(&gpio);
	gpio.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_5;
	gpio.GPIO_Speed = GPIO_Speed_10MHz;
	gpio.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOA, &gpio);

	GPIO_StructInit(&gpio);
	gpio.GPIO_Pin = GPIO_Pin_6;
	gpio.GPIO_Speed = GPIO_Speed_10MHz;
	gpio.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &gpio);

	SPI_InitTypeDef spi;
	SPI_StructInit(&spi);
	spi.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	spi.SPI_Mode = SPI_Mode_Master;
	spi.SPI_DataSize = SPI_DataSize_8b;
	spi.SPI_CPOL = SPI_CPOL_Low;
	spi.SPI_CPHA = SPI_CPHA_1Edge;
	spi.SPI_NSS = SPI_NSS_Soft;
	spi.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32;
	spi.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_Init(SPI1, &spi);

	SPI_SSOutputCmd(SPI1, DISABLE);
	SPI_NSSInternalSoftwareConfig(SPI1, SPI_NSSInternalSoft_Set);
	GPIO_SetBits(NSS_Port, NSS_Pin);
	SPI_Cmd(SPI1, ENABLE);

//	External interrupt configuration
	NVIC_EnableIRQ(EXTI9_5_IRQn);					// Âêëþ÷èòü ïðåðûâàíèå EXTI9_5

	EXTI_InitTypeDef exti_is;
	EXTI_StructInit(&exti_is);
	exti_is.EXTI_Line = CRCOK_PKSent_Line;
	exti_is.EXTI_Mode = EXTI_Mode_Interrupt;
	exti_is.EXTI_Trigger = EXTI_Trigger_Rising;
	exti_is.EXTI_LineCmd = ENABLE;
	EXTI_Init(&exti_is);

	exti_is.EXTI_Line = FifoLevel_Line;
	exti_is.EXTI_Mode = EXTI_Mode_Interrupt;
	exti_is.EXTI_Trigger = EXTI_Trigger_Rising;
	exti_is.EXTI_LineCmd = ENABLE;
	EXTI_Init(&exti_is);

	exti_is.EXTI_Line = SyncAddr_Line;
	exti_is.EXTI_Mode = EXTI_Mode_Interrupt;
	exti_is.EXTI_Trigger = EXTI_Trigger_Rising;
	exti_is.EXTI_LineCmd = ENABLE;
	EXTI_Init(&exti_is);

	GPIO_EXTILineConfig(EXTI_Port, EXTI_Pin1);
	GPIO_EXTILineConfig(EXTI_Port, EXTI_Pin2);
	GPIO_EXTILineConfig(EXTI_Port, EXTI_Pin3);

//	RFM69 initialization
	rfm69_write(REGOPMODE, REGOPMODE_DEF | STBY_MODE);
	rfm69_write(REGDATAMODUL, REGDATAMODUL_DEF);

	rfm69_write(REGFDEVMSB, REGFDEVMSB_DEF);
	rfm69_write(REGFDEVLSB, REGFDEVLSB_DEF);

	rfm69_write(REGBITRATEMSB, REGBITRATEMSB_DEF);
	rfm69_write(REGBITRATELSB, REGBITRATELSB_DEF);

	rfm69_write(REGFRFMSB, REGFRFMSB_DEF);
	rfm69_write(REGFRFMID, REGFRFMID_DEF);
	rfm69_write(REGFRFLSB, REGFRFLSB_DEF);

	rfm69_write(REGAFCCTRL, REGAFCCTRL_DEF);

//	rfm69_write(REGLISTEN1, REGLISTEN1_DEF);
//	rfm69_write(REGLISTEN2, REGLISTEN2_DEF);
//	rfm69_write(REGLISTEN3, REGLISTEN3_DEF);

	rfm69_write(REGPALEVEL, REGPALEVEL_DEF);
	rfm69_write(REGPARAMP, REGPARAMP_DEF);
	rfm69_write(REGOCP, REGOCP_DEF);
	rfm69_write(REGLNA, REGLNA_DEF);

	rfm69_write(REGRXBW, REGRXBW_DEF);
	rfm69_write(REGAFCBW, REGAFCBW_DEF);

//	rfm69_write(REGOOKPEAK, REGOOKPEAK_DEF);
//	rfm69_write(REGOOKAVG, REGOOKAVG_DEF);
//	rfm69_write(REGOOKFIX, REGOOKFIX_DEF);

	rfm69_write(REGAFCFEI, REGAFCFEI_DEF);

	rfm69_write(REGDIOMAPPING1, REGDIOMAPPING1_DEF);
	rfm69_write(REGDIOMAPPING2, REGDIOMAPPING2_DEF);

	rfm69_write(REGRSSITHRESH, REGRSSITHRESH_DEF);

	rfm69_write(REGPREAMBLEMSB, REGPREAMBLEMSB_DEF);
	rfm69_write(REGPREAMBLELSB, REGPREAMBLELSB_DEF);

	rfm69_write(REGSYNCCONFIG, REGSYNCCONFIG_DEF);
	rfm69_write(REGSYNCVALUE1, REGSYNCVALUE1_DEF);
	rfm69_write(REGSYNCVALUE2, REGSYNCVALUE2_DEF);
	rfm69_write(REGSYNCVALUE3, REGSYNCVALUE3_DEF);
	rfm69_write(REGSYNCVALUE4, REGSYNCVALUE4_DEF);
	rfm69_write(REGSYNCVALUE5, REGSYNCVALUE5_DEF);
	rfm69_write(REGSYNCVALUE6, REGSYNCVALUE6_DEF);
	rfm69_write(REGSYNCVALUE7, REGSYNCVALUE7_DEF);
	rfm69_write(REGSYNCVALUE8, REGSYNCVALUE8_DEF);

	rfm69_write(REGPACKETCONFIG1, REGPACKETCONFIG1_DEF);
	rfm69_write(REGPAYLOADLENGHT, REGPAYLOADLENGHT_DEF);
	rfm69_write(REGNODEADRS, REGNODEADRS_DEF);
	rfm69_write(REGBROADCASTADRS, REGBROADCASTADRS_DEF);

	rfm69_write(REGAUTOMODES, REGAUTOMODES_DEF);

	rfm69_write(REGFIFOTHRES, REGFIFOTHRES_DEF);
	rfm69_write(REGPACKETCONFIG2, REGPACKETCONFIG2_DEF);

//	rfm69_write(REGAESKEY1, REGAESKEY1_DEF);
//	rfm69_write(REGAESKEY2, REGAESKEY2_DEF);
//	rfm69_write(REGAESKEY3, REGAESKEY3_DEF);
//	rfm69_write(REGAESKEY4, REGAESKEY4_DEF);
//	rfm69_write(REGAESKEY5, REGAESKEY5_DEF);
//	rfm69_write(REGAESKEY6, REGAESKEY6_DEF);
//	rfm69_write(REGAESKEY7, REGAESKEY7_DEF);
//	rfm69_write(REGAESKEY8, REGAESKEY8_DEF);
//	rfm69_write(REGAESKEY9, REGAESKEY9_DEF);
//	rfm69_write(REGAESKEY10, REGAESKEY10_DEF);
//	rfm69_write(REGAESKEY11, REGAESKEY11_DEF);
//	rfm69_write(REGAESKEY12, REGAESKEY12_DEF);
//	rfm69_write(REGAESKEY13, REGAESKEY13_DEF);
//	rfm69_write(REGAESKEY14, REGAESKEY14_DEF);
//	rfm69_write(REGAESKEY15, REGAESKEY15_DEF);
//	rfm69_write(REGAESKEY16, REGAESKEY16_DEF);

	rfm69_write(REGTESTDAGC, AFC_LOW_BETA_OFF);

	rfm69_write(REGIRQFLAGS2, 1<<FIFOOVERRUN);

	for (j=0 ; j<99999 ; ++j);
	rfm69_receive_start();

	if ( rfm69_read(REGRXBW) != REGRXBW_DEF ) {
		rfm69_condition = RFM69_SPI_FAILED;
		return -1;
	}
	else	return 0;
}


int rfm69_transmit_start(uint8_t packet_size_loc, uint8_t address)
{
	__disable_irq();
	int i;
	rfm69_condition = RFM69_TX;

	packet_size = packet_size_loc;
	if(packet_size > RFM69_BUFFER_SIZE)	return -1;

	rfm69_write(REGOPMODE, REGOPMODE_DEF | TX_MODE);

	rfm69_write(REGFIFO, packet_size+1);									// packet size to FIFO
	rfm69_write(REGFIFO, address);											// address to FIFO
	for(i=0 ; i<packet_size ; ++i)	rfm69_write(REGFIFO, packet_buffer[i]);	// packet to FIFO

	__enable_irq();
	return 0;
}


void rfm69_receive_start(void)
{
	__disable_irq();
	rfm69_condition = RFM69_RX;
	rfm69_write(REGOPMODE, REGOPMODE_DEF | RX_MODE);
	__enable_irq();
}


int rfm69_receive_small_packet(void)
{
	int i;

	packet_size = rfm69_read(REGFIFO);
	if(packet_size == 0)				return -2;
	if(packet_size > RFM69_BUFFER_SIZE)	return -1;

	rfm69_read(REGFIFO);							// stripping off the address
	--packet_size;
	for(i=0 ; i<packet_size ; ++i) packet_buffer[i] = rfm69_read(REGFIFO);
//	rfm69_read_burst(REGFIFO, packet_buffer, packet_size);

	return packet_size;
}
/*
void rfm69_restart_rx(void)
{
    uint8_t flags;

    flags = rfm69_read(REGIRQFLAGS1);

    if( flags & (1<<RXREADY) )
    {
        if( (flags & (1<<SYNCADDRESSMATCH)) == 0 )
        {
            rfm69_write(REGPACKETCONFIG2, REGPACKETCONFIG2_DEF | (1<<RESTARTRX));
            rfm69_clear_fifo();                                                     // чисто по приколу (не знаю зачем)
        }
    }
}
*/

void rfm69_sleep(void)
{
	rfm69_write(REGOPMODE, REGOPMODE_DEF | SLEEP_MODE);
	rfm69_condition = RFM69_SLEEP;
}


void rfm69_stby(void)
{
	rfm69_write(REGOPMODE, REGOPMODE_DEF | STBY_MODE);
	rfm69_condition = RFM69_STBY;
}


void rfm69_clear_fifo(void)
{
    int i;
    for(i=0 ; i<RFM69_BUFFER_SIZE ; ++i)   rfm69_read(REGFIFO);
    rfm69_write(REGIRQFLAGS2, 1<<FIFOOVERRUN);
}
