
bin/modem.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 a1 1f 00 08 d5 0b 00 08 d7 0b 00 08     .P. ............
 8000010:	d9 0b 00 08 db 0b 00 08 dd 0b 00 08 00 00 00 00     ................
	...
 800002c:	df 0b 00 08 e1 0b 00 08 00 00 00 00 e3 0b 00 08     ................
 800003c:	e5 0b 00 08 e5 1f 00 08 e5 1f 00 08 e5 1f 00 08     ................
 800004c:	e5 1f 00 08 e5 1f 00 08 e5 1f 00 08 ed 06 00 08     ................
 800005c:	f9 01 00 08 31 07 00 08 e5 1f 00 08 e5 1f 00 08     ....1...........
 800006c:	e5 1f 00 08 e5 1f 00 08 e5 1f 00 08 e5 1f 00 08     ................
 800007c:	e5 1f 00 08 e5 1f 00 08 e5 1f 00 08 e5 1f 00 08     ................
 800008c:	e5 1f 00 08 e7 0b 00 08 e5 1f 00 08 e5 1f 00 08     ................
 800009c:	e5 1f 00 08 e5 1f 00 08 e5 1f 00 08 e5 1f 00 08     ................
 80000ac:	e5 1f 00 08 e5 1f 00 08 e5 1f 00 08 e5 1f 00 08     ................
 80000bc:	e5 1f 00 08 e5 1f 00 08 e5 1f 00 08 e5 1f 00 08     ................
 80000cc:	e5 1f 00 08 e5 1f 00 08 e5 1f 00 08 e5 1f 00 08     ................
 80000dc:	e5 1f 00 08 e5 1f 00 08 e5 1f 00 08 eb 0b 00 08     ................
	...
 8000108:	5f f8 08 f1                                         _...

0800010c <SetSysClockTo72>:



void SetSysClockTo72()
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800010c:	2300      	movs	r3, #0
{
 800010e:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000110:	9300      	str	r3, [sp, #0]
 8000112:	9301      	str	r3, [sp, #4]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON | RCC_CR_HSEBYP);
 8000114:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000118:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800011c:	681a      	ldr	r2, [r3, #0]
 800011e:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8000122:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000124:	681a      	ldr	r2, [r3, #0]
 8000126:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800012a:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 800012c:	9a00      	ldr	r2, [sp, #0]
 800012e:	3201      	adds	r2, #1
 8000130:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000132:	9a01      	ldr	r2, [sp, #4]
 8000134:	b91a      	cbnz	r2, 800013e <SetSysClockTo72+0x32>
 8000136:	9a00      	ldr	r2, [sp, #0]
 8000138:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800013c:	d1f2      	bne.n	8000124 <SetSysClockTo72+0x18>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800013e:	681a      	ldr	r2, [r3, #0]
 8000140:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000144:	bf18      	it	ne
 8000146:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000148:	9201      	str	r2, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 800014a:	9a01      	ldr	r2, [sp, #4]
 800014c:	2a01      	cmp	r2, #1
 800014e:	d130      	bne.n	80001b2 <SetSysClockTo72+0xa6>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000150:	4a19      	ldr	r2, [pc, #100]	; (80001b8 <SetSysClockTo72+0xac>)
 8000152:	6811      	ldr	r1, [r2, #0]
 8000154:	f041 0110 	orr.w	r1, r1, #16
 8000158:	6011      	str	r1, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800015a:	6811      	ldr	r1, [r2, #0]
 800015c:	f021 0103 	bic.w	r1, r1, #3
 8000160:	6011      	str	r1, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
 8000162:	6811      	ldr	r1, [r2, #0]
 8000164:	f041 0102 	orr.w	r1, r1, #2
 8000168:	6011      	str	r1, [r2, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800016a:	685a      	ldr	r2, [r3, #4]
 800016c:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800016e:	685a      	ldr	r2, [r3, #4]
 8000170:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK/2 */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000172:	685a      	ldr	r2, [r3, #4]
 8000174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000178:	605a      	str	r2, [r3, #4]


    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800017a:	685a      	ldr	r2, [r3, #4]
 800017c:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000180:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000182:	685a      	ldr	r2, [r3, #4]
 8000184:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000188:	605a      	str	r2, [r3, #4]
//    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL9);


    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000190:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	0192      	lsls	r2, r2, #6
 8000196:	d5fc      	bpl.n	8000192 <SetSysClockTo72+0x86>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000198:	685a      	ldr	r2, [r3, #4]
 800019a:	f022 0203 	bic.w	r2, r2, #3
 800019e:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80001a0:	685a      	ldr	r2, [r3, #4]
 80001a2:	f042 0202 	orr.w	r2, r2, #2
 80001a6:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80001a8:	685a      	ldr	r2, [r3, #4]
 80001aa:	f002 020c 	and.w	r2, r2, #12
 80001ae:	2a08      	cmp	r2, #8
 80001b0:	d1fa      	bne.n	80001a8 <SetSysClockTo72+0x9c>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 80001b2:	b002      	add	sp, #8
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	40022000 	.word	0x40022000

080001bc <main>:



int main(void)
{
 80001bc:	b508      	push	{r3, lr}
    int i;

	RCC->CR |= RCC_CR_HSION;            // set system clock from internal oscillator
 80001be:	4b0d      	ldr	r3, [pc, #52]	; (80001f4 <main+0x38>)
 80001c0:	681a      	ldr	r2, [r3, #0]
 80001c2:	f042 0201 	orr.w	r2, r2, #1
 80001c6:	601a      	str	r2, [r3, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY));
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	0792      	lsls	r2, r2, #30
 80001cc:	d5fc      	bpl.n	80001c8 <main+0xc>
	RCC->CFGR &= ~RCC_CFGR_SW;
 80001ce:	685a      	ldr	r2, [r3, #4]
 80001d0:	f022 0203 	bic.w	r2, r2, #3
 80001d4:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_HSI;
 80001d6:	685a      	ldr	r2, [r3, #4]
 80001d8:	605a      	str	r2, [r3, #4]

	for(i=0 ; i<99999 ; ++i);
	rfm69_init();
 80001da:	f000 f999 	bl	8000510 <rfm69_init>

	SetSysClockTo72();                  // set sys clock from RFM69
 80001de:	f7ff ff95 	bl	800010c <SetSysClockTo72>

	Set_System();
 80001e2:	f000 fc4d 	bl	8000a80 <Set_System>
	Set_USBClock();
 80001e6:	f000 fc5f 	bl	8000aa8 <Set_USBClock>
	USB_Interrupts_Config();
 80001ea:	f000 fc77 	bl	8000adc <USB_Interrupts_Config>
	USB_Init();
 80001ee:	f001 fc07 	bl	8001a00 <USB_Init>

	while(1)
 80001f2:	e7fe      	b.n	80001f2 <main+0x36>
 80001f4:	40021000 	.word	0x40021000

080001f8 <EXTI1_IRQHandler>:
        case RFM69_RX :
            break;
        case RFM69_TX :
            break;
    }
    EXTI_ClearITPendingBit(FifoLevel_Line);
 80001f8:	2002      	movs	r0, #2
 80001fa:	f000 bbc9 	b.w	8000990 <EXTI_ClearITPendingBit>
	...

08000200 <rfm69_write>:
	Запись регистра радиомодуля. Осуществляется по шине SPI.
	@param address - адрес регистра
	@param data	- данные, записываемые в регистр 
*/
void rfm69_write(uint8_t address, uint8_t data)
{
 8000200:	b538      	push	{r3, r4, r5, lr}
 8000202:	4605      	mov	r5, r0
 8000204:	460c      	mov	r4, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8000206:	b672      	cpsid	i
	__disable_irq();
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET);           // ожидание пока SPI занят
 8000208:	2180      	movs	r1, #128	; 0x80
 800020a:	4824      	ldr	r0, [pc, #144]	; (800029c <rfm69_write+0x9c>)
 800020c:	f000 fc1d 	bl	8000a4a <SPI_I2S_GetFlagStatus>
 8000210:	2801      	cmp	r0, #1
 8000212:	d0f9      	beq.n	8000208 <rfm69_write+0x8>

	GPIO_ResetBits(NSS_Port, NSS_Pin);
 8000214:	2108      	movs	r1, #8
 8000216:	4822      	ldr	r0, [pc, #136]	; (80002a0 <rfm69_write+0xa0>)
 8000218:	f000 fb46 	bl	80008a8 <GPIO_ResetBits>

    SPI_I2S_SendData(SPI1, (address | 0x80));                               // отправка адреса регистра
 800021c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 8000220:	481e      	ldr	r0, [pc, #120]	; (800029c <rfm69_write+0x9c>)
 8000222:	f000 fbf2 	bl	8000a0a <SPI_I2S_SendData>
    while ( (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) && \
 8000226:	4d1d      	ldr	r5, [pc, #116]	; (800029c <rfm69_write+0x9c>)
 8000228:	2102      	movs	r1, #2
 800022a:	481c      	ldr	r0, [pc, #112]	; (800029c <rfm69_write+0x9c>)
 800022c:	f000 fc0d 	bl	8000a4a <SPI_I2S_GetFlagStatus>
 8000230:	b928      	cbnz	r0, 800023e <rfm69_write+0x3e>
            (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET) );
 8000232:	2180      	movs	r1, #128	; 0x80
 8000234:	4628      	mov	r0, r5
 8000236:	f000 fc08 	bl	8000a4a <SPI_I2S_GetFlagStatus>
    while ( (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) && \
 800023a:	2801      	cmp	r0, #1
 800023c:	d0f4      	beq.n	8000228 <rfm69_write+0x28>

    SPI_I2S_SendData(SPI1, data);                                           // отправка данных	
 800023e:	4621      	mov	r1, r4
 8000240:	4816      	ldr	r0, [pc, #88]	; (800029c <rfm69_write+0x9c>)
 8000242:	f000 fbe2 	bl	8000a0a <SPI_I2S_SendData>

    while ( (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET) && \
 8000246:	4c15      	ldr	r4, [pc, #84]	; (800029c <rfm69_write+0x9c>)
 8000248:	2101      	movs	r1, #1
 800024a:	4814      	ldr	r0, [pc, #80]	; (800029c <rfm69_write+0x9c>)
 800024c:	f000 fbfd 	bl	8000a4a <SPI_I2S_GetFlagStatus>
 8000250:	b928      	cbnz	r0, 800025e <rfm69_write+0x5e>
            (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET) );
 8000252:	2180      	movs	r1, #128	; 0x80
 8000254:	4620      	mov	r0, r4
 8000256:	f000 fbf8 	bl	8000a4a <SPI_I2S_GetFlagStatus>
    while ( (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET) && \
 800025a:	2801      	cmp	r0, #1
 800025c:	d0f4      	beq.n	8000248 <rfm69_write+0x48>
    SPI_I2S_ReceiveData(SPI1);												// чтение данных в никуда
 800025e:	480f      	ldr	r0, [pc, #60]	; (800029c <rfm69_write+0x9c>)
 8000260:	f000 fbd5 	bl	8000a0e <SPI_I2S_ReceiveData>

    while ( (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET) && \
 8000264:	4c0d      	ldr	r4, [pc, #52]	; (800029c <rfm69_write+0x9c>)
 8000266:	2101      	movs	r1, #1
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <rfm69_write+0x9c>)
 800026a:	f000 fbee 	bl	8000a4a <SPI_I2S_GetFlagStatus>
 800026e:	b928      	cbnz	r0, 800027c <rfm69_write+0x7c>
            (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET) );
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	4620      	mov	r0, r4
 8000274:	f000 fbe9 	bl	8000a4a <SPI_I2S_GetFlagStatus>
    while ( (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET) && \
 8000278:	2801      	cmp	r0, #1
 800027a:	d0f4      	beq.n	8000266 <rfm69_write+0x66>
    SPI_I2S_ReceiveData(SPI1);												// чтение данных в никуда
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <rfm69_write+0x9c>)
 800027e:	f000 fbc6 	bl	8000a0e <SPI_I2S_ReceiveData>

	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET);           // ожидание пока SPI занят
 8000282:	4c06      	ldr	r4, [pc, #24]	; (800029c <rfm69_write+0x9c>)
 8000284:	2180      	movs	r1, #128	; 0x80
 8000286:	4620      	mov	r0, r4
 8000288:	f000 fbdf 	bl	8000a4a <SPI_I2S_GetFlagStatus>
 800028c:	2801      	cmp	r0, #1
 800028e:	d0f9      	beq.n	8000284 <rfm69_write+0x84>
	GPIO_SetBits(NSS_Port, NSS_Pin);
 8000290:	2108      	movs	r1, #8
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <rfm69_write+0xa0>)
 8000294:	f000 fb06 	bl	80008a4 <GPIO_SetBits>
  __ASM volatile ("cpsie i");
 8000298:	b662      	cpsie	i

	__enable_irq();
}
 800029a:	bd38      	pop	{r3, r4, r5, pc}
 800029c:	40013000 	.word	0x40013000
 80002a0:	40010800 	.word	0x40010800

080002a4 <rfm69_read>:
	Чтение регистра радиомодуля. Осуществляется по шине SPI.
	@param address - адрес регистра
	@return данные, считанные из регистра 
*/
uint8_t rfm69_read(uint8_t address)
{
 80002a4:	b538      	push	{r3, r4, r5, lr}
 80002a6:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i");
 80002a8:	b672      	cpsid	i
	uint8_t data = 0x00;

	__disable_irq();
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET);           // ожидание пока SPI занят
 80002aa:	2180      	movs	r1, #128	; 0x80
 80002ac:	4824      	ldr	r0, [pc, #144]	; (8000340 <rfm69_read+0x9c>)
 80002ae:	f000 fbcc 	bl	8000a4a <SPI_I2S_GetFlagStatus>
 80002b2:	2801      	cmp	r0, #1
 80002b4:	d0f9      	beq.n	80002aa <rfm69_read+0x6>

	GPIO_ResetBits(NSS_Port, NSS_Pin);
 80002b6:	2108      	movs	r1, #8
 80002b8:	4822      	ldr	r0, [pc, #136]	; (8000344 <rfm69_read+0xa0>)
 80002ba:	f000 faf5 	bl	80008a8 <GPIO_ResetBits>

    SPI_I2S_SendData(SPI1, (address));                                      // отправка адреса
 80002be:	4621      	mov	r1, r4
 80002c0:	481f      	ldr	r0, [pc, #124]	; (8000340 <rfm69_read+0x9c>)
 80002c2:	f000 fba2 	bl	8000a0a <SPI_I2S_SendData>
    while ( (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) && \
 80002c6:	4c1e      	ldr	r4, [pc, #120]	; (8000340 <rfm69_read+0x9c>)
 80002c8:	2102      	movs	r1, #2
 80002ca:	481d      	ldr	r0, [pc, #116]	; (8000340 <rfm69_read+0x9c>)
 80002cc:	f000 fbbd 	bl	8000a4a <SPI_I2S_GetFlagStatus>
 80002d0:	b928      	cbnz	r0, 80002de <rfm69_read+0x3a>
            (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET) );
 80002d2:	2180      	movs	r1, #128	; 0x80
 80002d4:	4620      	mov	r0, r4
 80002d6:	f000 fbb8 	bl	8000a4a <SPI_I2S_GetFlagStatus>
    while ( (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) && \
 80002da:	2801      	cmp	r0, #1
 80002dc:	d0f4      	beq.n	80002c8 <rfm69_read+0x24>

    SPI_I2S_SendData(SPI1, 0x87);                                           // отправка сдучайных данных
 80002de:	2187      	movs	r1, #135	; 0x87
 80002e0:	4817      	ldr	r0, [pc, #92]	; (8000340 <rfm69_read+0x9c>)
 80002e2:	f000 fb92 	bl	8000a0a <SPI_I2S_SendData>

    while ( (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET) && \
 80002e6:	4c16      	ldr	r4, [pc, #88]	; (8000340 <rfm69_read+0x9c>)
 80002e8:	2101      	movs	r1, #1
 80002ea:	4815      	ldr	r0, [pc, #84]	; (8000340 <rfm69_read+0x9c>)
 80002ec:	f000 fbad 	bl	8000a4a <SPI_I2S_GetFlagStatus>
 80002f0:	b928      	cbnz	r0, 80002fe <rfm69_read+0x5a>
            (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET) );
 80002f2:	2180      	movs	r1, #128	; 0x80
 80002f4:	4620      	mov	r0, r4
 80002f6:	f000 fba8 	bl	8000a4a <SPI_I2S_GetFlagStatus>
    while ( (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET) && \
 80002fa:	2801      	cmp	r0, #1
 80002fc:	d0f4      	beq.n	80002e8 <rfm69_read+0x44>
    SPI_I2S_ReceiveData(SPI1);                                              // чтение полученных данных в никуда
 80002fe:	4810      	ldr	r0, [pc, #64]	; (8000340 <rfm69_read+0x9c>)
 8000300:	f000 fb85 	bl	8000a0e <SPI_I2S_ReceiveData>

    while ( (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET) && \
 8000304:	4c0e      	ldr	r4, [pc, #56]	; (8000340 <rfm69_read+0x9c>)
 8000306:	2101      	movs	r1, #1
 8000308:	480d      	ldr	r0, [pc, #52]	; (8000340 <rfm69_read+0x9c>)
 800030a:	f000 fb9e 	bl	8000a4a <SPI_I2S_GetFlagStatus>
 800030e:	b928      	cbnz	r0, 800031c <rfm69_read+0x78>
            (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET) );
 8000310:	2180      	movs	r1, #128	; 0x80
 8000312:	4620      	mov	r0, r4
 8000314:	f000 fb99 	bl	8000a4a <SPI_I2S_GetFlagStatus>
    while ( (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET) && \
 8000318:	2801      	cmp	r0, #1
 800031a:	d0f4      	beq.n	8000306 <rfm69_read+0x62>
    data = SPI_I2S_ReceiveData(SPI1);                                       // чтение полезных данных
 800031c:	4808      	ldr	r0, [pc, #32]	; (8000340 <rfm69_read+0x9c>)
 800031e:	f000 fb76 	bl	8000a0e <SPI_I2S_ReceiveData>

    while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET);           // ожидание пока SPI занят
 8000322:	4d07      	ldr	r5, [pc, #28]	; (8000340 <rfm69_read+0x9c>)
    data = SPI_I2S_ReceiveData(SPI1);                                       // чтение полезных данных
 8000324:	b2c4      	uxtb	r4, r0
    while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET);           // ожидание пока SPI занят
 8000326:	2180      	movs	r1, #128	; 0x80
 8000328:	4628      	mov	r0, r5
 800032a:	f000 fb8e 	bl	8000a4a <SPI_I2S_GetFlagStatus>
 800032e:	2801      	cmp	r0, #1
 8000330:	d0f9      	beq.n	8000326 <rfm69_read+0x82>
	GPIO_SetBits(NSS_Port, NSS_Pin);
 8000332:	2108      	movs	r1, #8
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <rfm69_read+0xa0>)
 8000336:	f000 fab5 	bl	80008a4 <GPIO_SetBits>
  __ASM volatile ("cpsie i");
 800033a:	b662      	cpsie	i

	__enable_irq();
	return data;
}
 800033c:	4620      	mov	r0, r4
 800033e:	bd38      	pop	{r3, r4, r5, pc}
 8000340:	40013000 	.word	0x40013000
 8000344:	40010800 	.word	0x40010800

08000348 <rfm69_mcu_init>:
	конфигурация портов ввода-вывода, конфигурация SPI, таймера и настройка внешних прерываний. 	 
*/
void rfm69_mcu_init(void)
{
//	Включение тактирования
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000348:	2101      	movs	r1, #1
{
 800034a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800034e:	4608      	mov	r0, r1
{
 8000350:	b088      	sub	sp, #32
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000352:	f000 fad3 	bl	80008fc <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000356:	2101      	movs	r1, #1
 8000358:	4608      	mov	r0, r1
 800035a:	f000 fac3 	bl	80008e4 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 800035e:	2101      	movs	r1, #1
 8000360:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000364:	f000 fabe 	bl	80008e4 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);		
 8000368:	2101      	movs	r1, #1
 800036a:	200c      	movs	r0, #12
 800036c:	f000 faba 	bl	80008e4 <RCC_APB2PeriphClockCmd>

//	Инициализация SPI
	GPIO_InitTypeDef gpio;					// NSS pin configuration
	GPIO_StructInit(&gpio);
 8000370:	4668      	mov	r0, sp
 8000372:	f000 fa90 	bl	8000896 <GPIO_StructInit>
	gpio.GPIO_Pin = NSS_Pin;
 8000376:	f04f 0808 	mov.w	r8, #8
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 800037a:	f241 0303 	movw	r3, #4099	; 0x1003
	gpio.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(NSS_Port, &gpio);
 800037e:	4e45      	ldr	r6, [pc, #276]	; (8000494 <rfm69_mcu_init+0x14c>)
 8000380:	4669      	mov	r1, sp
 8000382:	4630      	mov	r0, r6
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 8000384:	f8ad 3002 	strh.w	r3, [sp, #2]
	gpio.GPIO_Pin = NSS_Pin;
 8000388:	f8ad 8000 	strh.w	r8, [sp]
	GPIO_Init(NSS_Port, &gpio);
 800038c:	f000 fa32 	bl	80007f4 <GPIO_Init>

	GPIO_StructInit(&gpio);					// configuration of MOSI and SCK pins
 8000390:	4668      	mov	r0, sp
 8000392:	f000 fa80 	bl	8000896 <GPIO_StructInit>
	gpio.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_5;
 8000396:	23a0      	movs	r3, #160	; 0xa0
 8000398:	f8ad 3000 	strh.w	r3, [sp]
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 800039c:	f641 0303 	movw	r3, #6147	; 0x1803
	gpio.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOA, &gpio);
 80003a0:	4669      	mov	r1, sp
 80003a2:	4630      	mov	r0, r6
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 80003a4:	f8ad 3002 	strh.w	r3, [sp, #2]
	GPIO_Init(GPIOA, &gpio);
 80003a8:	f000 fa24 	bl	80007f4 <GPIO_Init>

	GPIO_StructInit(&gpio);					// MISO pin configuration
 80003ac:	4668      	mov	r0, sp
 80003ae:	f000 fa72 	bl	8000896 <GPIO_StructInit>
	gpio.GPIO_Pin = GPIO_Pin_6;
 80003b2:	2740      	movs	r7, #64	; 0x40
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 80003b4:	f240 4303 	movw	r3, #1027	; 0x403
	gpio.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &gpio);
 80003b8:	4669      	mov	r1, sp
 80003ba:	4630      	mov	r0, r6
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 80003bc:	f8ad 3002 	strh.w	r3, [sp, #2]
	gpio.GPIO_Pin = GPIO_Pin_6;
 80003c0:	f8ad 7000 	strh.w	r7, [sp]
	GPIO_Init(GPIOA, &gpio);
 80003c4:	f000 fa16 	bl	80007f4 <GPIO_Init>

	SPI_InitTypeDef spi;
	SPI_StructInit(&spi);
 80003c8:	a803      	add	r0, sp, #12
 80003ca:	f000 fb06 	bl	80009da <SPI_StructInit>
	spi.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	spi.SPI_Mode = SPI_Mode_Master;
 80003ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80003d2:	f8ad 300e 	strh.w	r3, [sp, #14]
	spi.SPI_DataSize = SPI_DataSize_8b;
	spi.SPI_CPOL = SPI_CPOL_Low;
	spi.SPI_CPHA = SPI_CPHA_1Edge;
	spi.SPI_NSS = SPI_NSS_Soft;
 80003d6:	f44f 7300 	mov.w	r3, #512	; 0x200
	spi.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80003da:	2400      	movs	r4, #0
	spi.SPI_NSS = SPI_NSS_Soft;
 80003dc:	f8ad 3016 	strh.w	r3, [sp, #22]
	spi.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 80003e0:	2318      	movs	r3, #24
	spi.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_Init(SPI1, &spi);
 80003e2:	4d2d      	ldr	r5, [pc, #180]	; (8000498 <rfm69_mcu_init+0x150>)
 80003e4:	a903      	add	r1, sp, #12
 80003e6:	4628      	mov	r0, r5
	spi.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 80003e8:	f8ad 3018 	strh.w	r3, [sp, #24]
	spi.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80003ec:	f8ad 400c 	strh.w	r4, [sp, #12]
	spi.SPI_DataSize = SPI_DataSize_8b;
 80003f0:	f8ad 4010 	strh.w	r4, [sp, #16]
	spi.SPI_CPOL = SPI_CPOL_Low;
 80003f4:	f8ad 4012 	strh.w	r4, [sp, #18]
	spi.SPI_CPHA = SPI_CPHA_1Edge;
 80003f8:	f8ad 4014 	strh.w	r4, [sp, #20]
	spi.SPI_FirstBit = SPI_FirstBit_MSB;
 80003fc:	f8ad 401a 	strh.w	r4, [sp, #26]
	SPI_Init(SPI1, &spi);
 8000400:	f000 facc 	bl	800099c <SPI_Init>

	SPI_SSOutputCmd(SPI1, DISABLE);
 8000404:	4621      	mov	r1, r4
 8000406:	4628      	mov	r0, r5
 8000408:	f000 fb13 	bl	8000a32 <SPI_SSOutputCmd>
	SPI_NSSInternalSoftwareConfig(SPI1, SPI_NSSInternalSoft_Set);
 800040c:	4628      	mov	r0, r5
 800040e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000412:	f000 faff 	bl	8000a14 <SPI_NSSInternalSoftwareConfig>
	GPIO_SetBits(NSS_Port, NSS_Pin);
 8000416:	4641      	mov	r1, r8
 8000418:	4630      	mov	r0, r6
 800041a:	f000 fa43 	bl	80008a4 <GPIO_SetBits>
	SPI_Cmd(SPI1, ENABLE);
 800041e:	2101      	movs	r1, #1
 8000420:	4628      	mov	r0, r5
 8000422:	f000 fae6 	bl	80009f2 <SPI_Cmd>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	4b1c      	ldr	r3, [pc, #112]	; (800049c <rfm69_mcu_init+0x154>)
	NVIC_EnableIRQ(EXTI0_IRQn);					// enable external interrupts
	NVIC_EnableIRQ(EXTI1_IRQn);
    NVIC_EnableIRQ(EXTI2_IRQn);

	EXTI_InitTypeDef exti_is;
	EXTI_StructInit(&exti_is);
 800042a:	a801      	add	r0, sp, #4
 800042c:	601f      	str	r7, [r3, #0]
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	f000 faa3 	bl	8000980 <EXTI_StructInit>
	exti_is.EXTI_Line = CRCOK_PKSent_Line;
 800043a:	2304      	movs	r3, #4
	exti_is.EXTI_Mode = EXTI_Mode_Interrupt;
	exti_is.EXTI_Trigger = EXTI_Trigger_Rising;
	exti_is.EXTI_LineCmd = ENABLE;
 800043c:	2501      	movs	r5, #1
	exti_is.EXTI_Mode = EXTI_Mode_Interrupt;
 800043e:	f44f 6600 	mov.w	r6, #2048	; 0x800
	EXTI_Init(&exti_is);

	exti_is.EXTI_Line = FifoLevel_Line;
 8000442:	2702      	movs	r7, #2
	EXTI_Init(&exti_is);
 8000444:	eb0d 0003 	add.w	r0, sp, r3
	exti_is.EXTI_Line = CRCOK_PKSent_Line;
 8000448:	9301      	str	r3, [sp, #4]
	exti_is.EXTI_Mode = EXTI_Mode_Interrupt;
 800044a:	f8ad 6008 	strh.w	r6, [sp, #8]
	exti_is.EXTI_LineCmd = ENABLE;
 800044e:	f88d 500a 	strb.w	r5, [sp, #10]
	EXTI_Init(&exti_is);
 8000452:	f000 fa5f 	bl	8000914 <EXTI_Init>
	exti_is.EXTI_Mode = EXTI_Mode_Interrupt;
	exti_is.EXTI_Trigger = EXTI_Trigger_Rising;
	exti_is.EXTI_LineCmd = ENABLE;
	EXTI_Init(&exti_is);
 8000456:	a801      	add	r0, sp, #4
	exti_is.EXTI_Line = FifoLevel_Line;
 8000458:	9701      	str	r7, [sp, #4]
	exti_is.EXTI_Mode = EXTI_Mode_Interrupt;
 800045a:	f8ad 6008 	strh.w	r6, [sp, #8]
	exti_is.EXTI_LineCmd = ENABLE;
 800045e:	f88d 500a 	strb.w	r5, [sp, #10]
	EXTI_Init(&exti_is);
 8000462:	f000 fa57 	bl	8000914 <EXTI_Init>

	exti_is.EXTI_Line = SyncAddr_Line;
	exti_is.EXTI_Mode = EXTI_Mode_Interrupt;
	exti_is.EXTI_Trigger = EXTI_Trigger_Rising;
	exti_is.EXTI_LineCmd = ENABLE;
	EXTI_Init(&exti_is);
 8000466:	a801      	add	r0, sp, #4
	exti_is.EXTI_Line = SyncAddr_Line;
 8000468:	9501      	str	r5, [sp, #4]
	exti_is.EXTI_Mode = EXTI_Mode_Interrupt;
 800046a:	f8ad 6008 	strh.w	r6, [sp, #8]
	exti_is.EXTI_LineCmd = ENABLE;
 800046e:	f88d 500a 	strb.w	r5, [sp, #10]
	EXTI_Init(&exti_is);
 8000472:	f000 fa4f 	bl	8000914 <EXTI_Init>

	GPIO_EXTILineConfig(EXTI_Port1, EXTI_Pin1);
 8000476:	4621      	mov	r1, r4
 8000478:	4628      	mov	r0, r5
 800047a:	f000 fa17 	bl	80008ac <GPIO_EXTILineConfig>
	GPIO_EXTILineConfig(EXTI_Port23, EXTI_Pin2);
 800047e:	4629      	mov	r1, r5
 8000480:	4620      	mov	r0, r4
 8000482:	f000 fa13 	bl	80008ac <GPIO_EXTILineConfig>
	GPIO_EXTILineConfig(EXTI_Port23, EXTI_Pin3);
 8000486:	4639      	mov	r1, r7
 8000488:	4620      	mov	r0, r4
 800048a:	f000 fa0f 	bl	80008ac <GPIO_EXTILineConfig>
}
 800048e:	b008      	add	sp, #32
 8000490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000494:	40010800 	.word	0x40010800
 8000498:	40013000 	.word	0x40013000
 800049c:	e000e100 	.word	0xe000e100

080004a0 <rfm69_transmit_start>:
	@param address - адрес устройства, которому необходимо  передать пакет
	При этом подразумевается что передаваемые данные должны находиться в глобальном массиве packet_buffer.
	@return отрицательное значение, если размер пакета слишком большой, иначе ноль
*/
int rfm69_transmit_start(uint8_t packet_size_loc, uint8_t address)
{
 80004a0:	b570      	push	{r4, r5, r6, lr}
	int i;

	packet_size = packet_size_loc;
 80004a2:	4d13      	ldr	r5, [pc, #76]	; (80004f0 <rfm69_transmit_start+0x50>)
	if(packet_size > RFM69_BUFFER_SIZE)	return -1;							// проверка размера пакета
 80004a4:	2842      	cmp	r0, #66	; 0x42
{
 80004a6:	460c      	mov	r4, r1
	packet_size = packet_size_loc;
 80004a8:	7028      	strb	r0, [r5, #0]
	if(packet_size > RFM69_BUFFER_SIZE)	return -1;							// проверка размера пакета
 80004aa:	d81e      	bhi.n	80004ea <rfm69_transmit_start+0x4a>

	rfm69_condition = RFM69_TX;
 80004ac:	2205      	movs	r2, #5
 80004ae:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <rfm69_transmit_start+0x54>)
	rfm69_write(REGOPMODE, REGOPMODE_DEF | TX_MODE);                        // включить передатчик
 80004b0:	210c      	movs	r1, #12
 80004b2:	2001      	movs	r0, #1
	rfm69_condition = RFM69_TX;
 80004b4:	701a      	strb	r2, [r3, #0]
	rfm69_write(REGOPMODE, REGOPMODE_DEF | TX_MODE);                        // включить передатчик
 80004b6:	f7ff fea3 	bl	8000200 <rfm69_write>

	rfm69_write(REGFIFO, packet_size+1);									// передача размера пакета в FIFO
 80004ba:	7829      	ldrb	r1, [r5, #0]
 80004bc:	2000      	movs	r0, #0
 80004be:	3101      	adds	r1, #1
 80004c0:	b2c9      	uxtb	r1, r1
 80004c2:	f7ff fe9d 	bl	8000200 <rfm69_write>
	rfm69_write(REGFIFO, address);											// передача адреса в FIFO
 80004c6:	4621      	mov	r1, r4
 80004c8:	2000      	movs	r0, #0
 80004ca:	f7ff fe99 	bl	8000200 <rfm69_write>
	for(i=0 ; i<packet_size ; ++i)	rfm69_write(REGFIFO, packet_buffer[i]);	// передача самого пакета в FIFO
 80004ce:	2400      	movs	r4, #0
 80004d0:	4e09      	ldr	r6, [pc, #36]	; (80004f8 <rfm69_transmit_start+0x58>)
 80004d2:	782b      	ldrb	r3, [r5, #0]
 80004d4:	42a3      	cmp	r3, r4
 80004d6:	dc01      	bgt.n	80004dc <rfm69_transmit_start+0x3c>

	return 0;
 80004d8:	2000      	movs	r0, #0
}
 80004da:	bd70      	pop	{r4, r5, r6, pc}
	for(i=0 ; i<packet_size ; ++i)	rfm69_write(REGFIFO, packet_buffer[i]);	// передача самого пакета в FIFO
 80004dc:	2000      	movs	r0, #0
 80004de:	f816 1b01 	ldrb.w	r1, [r6], #1
 80004e2:	f7ff fe8d 	bl	8000200 <rfm69_write>
 80004e6:	3401      	adds	r4, #1
 80004e8:	e7f3      	b.n	80004d2 <rfm69_transmit_start+0x32>
	if(packet_size > RFM69_BUFFER_SIZE)	return -1;							// проверка размера пакета
 80004ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004ee:	e7f4      	b.n	80004da <rfm69_transmit_start+0x3a>
 80004f0:	20000169 	.word	0x20000169
 80004f4:	2000016a 	.word	0x2000016a
 80004f8:	20000129 	.word	0x20000129

080004fc <rfm69_receive_start>:
	@function
	Запуск приемника.
*/
void rfm69_receive_start(void)
{
	rfm69_condition = RFM69_RX;
 80004fc:	2204      	movs	r2, #4
 80004fe:	4b03      	ldr	r3, [pc, #12]	; (800050c <rfm69_receive_start+0x10>)
	rfm69_write(REGOPMODE, REGOPMODE_DEF | RX_MODE);
 8000500:	2110      	movs	r1, #16
 8000502:	2001      	movs	r0, #1
	rfm69_condition = RFM69_RX;
 8000504:	701a      	strb	r2, [r3, #0]
	rfm69_write(REGOPMODE, REGOPMODE_DEF | RX_MODE);
 8000506:	f7ff be7b 	b.w	8000200 <rfm69_write>
 800050a:	bf00      	nop
 800050c:	2000016a 	.word	0x2000016a

08000510 <rfm69_init>:
{
 8000510:	b508      	push	{r3, lr}
    rfm69_mcu_init();
 8000512:	f7ff ff19 	bl	8000348 <rfm69_mcu_init>
	rfm69_write(REGOPMODE, REGOPMODE_DEF | STBY_MODE);
 8000516:	2104      	movs	r1, #4
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff fe71 	bl	8000200 <rfm69_write>
	rfm69_write(REGDATAMODUL, REGDATAMODUL_DEF);
 800051e:	2101      	movs	r1, #1
 8000520:	2002      	movs	r0, #2
 8000522:	f7ff fe6d 	bl	8000200 <rfm69_write>
	rfm69_write(REGFDEVMSB, REGFDEVMSB_DEF);
 8000526:	2102      	movs	r1, #2
 8000528:	2005      	movs	r0, #5
 800052a:	f7ff fe69 	bl	8000200 <rfm69_write>
	rfm69_write(REGFDEVLSB, REGFDEVLSB_DEF);
 800052e:	218f      	movs	r1, #143	; 0x8f
 8000530:	2006      	movs	r0, #6
 8000532:	f7ff fe65 	bl	8000200 <rfm69_write>
	rfm69_write(REGBITRATEMSB, REGBITRATEMSB_DEF);
 8000536:	2106      	movs	r1, #6
 8000538:	2003      	movs	r0, #3
 800053a:	f7ff fe61 	bl	8000200 <rfm69_write>
	rfm69_write(REGBITRATELSB, REGBITRATELSB_DEF);
 800053e:	2182      	movs	r1, #130	; 0x82
 8000540:	2004      	movs	r0, #4
 8000542:	f7ff fe5d 	bl	8000200 <rfm69_write>
	rfm69_write(REGFRFMSB, REGFRFMSB_DEF);
 8000546:	21d9      	movs	r1, #217	; 0xd9
 8000548:	2007      	movs	r0, #7
 800054a:	f7ff fe59 	bl	8000200 <rfm69_write>
	rfm69_write(REGFRFMID, REGFRFMID_DEF);
 800054e:	2130      	movs	r1, #48	; 0x30
 8000550:	2008      	movs	r0, #8
 8000552:	f7ff fe55 	bl	8000200 <rfm69_write>
	rfm69_write(REGFRFLSB, REGFRFLSB_DEF);
 8000556:	2106      	movs	r1, #6
 8000558:	2009      	movs	r0, #9
 800055a:	f7ff fe51 	bl	8000200 <rfm69_write>
	rfm69_write(REGAFCCTRL, REGAFCCTRL_DEF);
 800055e:	2100      	movs	r1, #0
 8000560:	200b      	movs	r0, #11
 8000562:	f7ff fe4d 	bl	8000200 <rfm69_write>
	rfm69_write(REGPALEVEL, REGPALEVEL_DEF);
 8000566:	219f      	movs	r1, #159	; 0x9f
 8000568:	2011      	movs	r0, #17
 800056a:	f7ff fe49 	bl	8000200 <rfm69_write>
	rfm69_write(REGPARAMP, REGPARAMP_DEF);
 800056e:	210f      	movs	r1, #15
 8000570:	2012      	movs	r0, #18
 8000572:	f7ff fe45 	bl	8000200 <rfm69_write>
	rfm69_write(REGOCP, REGOCP_DEF);
 8000576:	211a      	movs	r1, #26
 8000578:	2013      	movs	r0, #19
 800057a:	f7ff fe41 	bl	8000200 <rfm69_write>
	rfm69_write(REGLNA, REGLNA_DEF);
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	2018      	movs	r0, #24
 8000582:	f7ff fe3d 	bl	8000200 <rfm69_write>
	rfm69_write(REGRXBW, REGRXBW_DEF);
 8000586:	214b      	movs	r1, #75	; 0x4b
 8000588:	2019      	movs	r0, #25
 800058a:	f7ff fe39 	bl	8000200 <rfm69_write>
	rfm69_write(REGAFCBW, REGAFCBW_DEF);
 800058e:	214b      	movs	r1, #75	; 0x4b
 8000590:	201a      	movs	r0, #26
 8000592:	f7ff fe35 	bl	8000200 <rfm69_write>
	rfm69_write(REGAFCFEI, REGAFCFEI_DEF);
 8000596:	2108      	movs	r1, #8
 8000598:	201e      	movs	r0, #30
 800059a:	f7ff fe31 	bl	8000200 <rfm69_write>
	rfm69_write(REGDIOMAPPING1, REGDIOMAPPING1_DEF);
 800059e:	2109      	movs	r1, #9
 80005a0:	2025      	movs	r0, #37	; 0x25
 80005a2:	f7ff fe2d 	bl	8000200 <rfm69_write>
	rfm69_write(REGDIOMAPPING2, REGDIOMAPPING2_DEF);
 80005a6:	2102      	movs	r1, #2
 80005a8:	2026      	movs	r0, #38	; 0x26
 80005aa:	f7ff fe29 	bl	8000200 <rfm69_write>
	rfm69_write(REGRSSITHRESH, REGRSSITHRESH_DEF);
 80005ae:	21b0      	movs	r1, #176	; 0xb0
 80005b0:	2029      	movs	r0, #41	; 0x29
 80005b2:	f7ff fe25 	bl	8000200 <rfm69_write>
	rfm69_write(REGPREAMBLEMSB, REGPREAMBLEMSB_DEF);
 80005b6:	2100      	movs	r1, #0
 80005b8:	202c      	movs	r0, #44	; 0x2c
 80005ba:	f7ff fe21 	bl	8000200 <rfm69_write>
	rfm69_write(REGPREAMBLELSB, REGPREAMBLELSB_DEF);
 80005be:	2104      	movs	r1, #4
 80005c0:	202d      	movs	r0, #45	; 0x2d
 80005c2:	f7ff fe1d 	bl	8000200 <rfm69_write>
	rfm69_write(REGSYNCCONFIG, REGSYNCCONFIG_DEF);
 80005c6:	219a      	movs	r1, #154	; 0x9a
 80005c8:	202e      	movs	r0, #46	; 0x2e
 80005ca:	f7ff fe19 	bl	8000200 <rfm69_write>
	rfm69_write(REGSYNCVALUE1, REGSYNCVALUE1_DEF);
 80005ce:	21ca      	movs	r1, #202	; 0xca
 80005d0:	202f      	movs	r0, #47	; 0x2f
 80005d2:	f7ff fe15 	bl	8000200 <rfm69_write>
	rfm69_write(REGSYNCVALUE2, REGSYNCVALUE2_DEF);
 80005d6:	21e1      	movs	r1, #225	; 0xe1
 80005d8:	2030      	movs	r0, #48	; 0x30
 80005da:	f7ff fe11 	bl	8000200 <rfm69_write>
	rfm69_write(REGSYNCVALUE3, REGSYNCVALUE3_DEF);
 80005de:	213b      	movs	r1, #59	; 0x3b
 80005e0:	2031      	movs	r0, #49	; 0x31
 80005e2:	f7ff fe0d 	bl	8000200 <rfm69_write>
	rfm69_write(REGSYNCVALUE4, REGSYNCVALUE4_DEF);
 80005e6:	2175      	movs	r1, #117	; 0x75
 80005e8:	2032      	movs	r0, #50	; 0x32
 80005ea:	f7ff fe09 	bl	8000200 <rfm69_write>
	rfm69_write(REGSYNCVALUE5, REGSYNCVALUE5_DEF);
 80005ee:	21ca      	movs	r1, #202	; 0xca
 80005f0:	2033      	movs	r0, #51	; 0x33
 80005f2:	f7ff fe05 	bl	8000200 <rfm69_write>
	rfm69_write(REGSYNCVALUE6, REGSYNCVALUE6_DEF);
 80005f6:	21e1      	movs	r1, #225	; 0xe1
 80005f8:	2034      	movs	r0, #52	; 0x34
 80005fa:	f7ff fe01 	bl	8000200 <rfm69_write>
	rfm69_write(REGSYNCVALUE7, REGSYNCVALUE7_DEF);
 80005fe:	213b      	movs	r1, #59	; 0x3b
 8000600:	2035      	movs	r0, #53	; 0x35
 8000602:	f7ff fdfd 	bl	8000200 <rfm69_write>
	rfm69_write(REGSYNCVALUE8, REGSYNCVALUE8_DEF);
 8000606:	2175      	movs	r1, #117	; 0x75
 8000608:	2036      	movs	r0, #54	; 0x36
 800060a:	f7ff fdf9 	bl	8000200 <rfm69_write>
	rfm69_write(REGPACKETCONFIG1, REGPACKETCONFIG1_DEF);
 800060e:	2194      	movs	r1, #148	; 0x94
 8000610:	2037      	movs	r0, #55	; 0x37
 8000612:	f7ff fdf5 	bl	8000200 <rfm69_write>
	rfm69_write(REGPAYLOADLENGHT, REGPAYLOADLENGHT_DEF);
 8000616:	21ff      	movs	r1, #255	; 0xff
 8000618:	2038      	movs	r0, #56	; 0x38
 800061a:	f7ff fdf1 	bl	8000200 <rfm69_write>
	rfm69_write(REGNODEADRS, REGNODEADRS_DEF);
 800061e:	2105      	movs	r1, #5
 8000620:	2039      	movs	r0, #57	; 0x39
 8000622:	f7ff fded 	bl	8000200 <rfm69_write>
	rfm69_write(REGBROADCASTADRS, REGBROADCASTADRS_DEF);
 8000626:	21ff      	movs	r1, #255	; 0xff
 8000628:	203a      	movs	r0, #58	; 0x3a
 800062a:	f7ff fde9 	bl	8000200 <rfm69_write>
	rfm69_write(REGAUTOMODES, REGAUTOMODES_DEF);
 800062e:	2100      	movs	r1, #0
 8000630:	203b      	movs	r0, #59	; 0x3b
 8000632:	f7ff fde5 	bl	8000200 <rfm69_write>
	rfm69_write(REGFIFOTHRES, REGFIFOTHRES_DEF);
 8000636:	21a0      	movs	r1, #160	; 0xa0
 8000638:	203c      	movs	r0, #60	; 0x3c
 800063a:	f7ff fde1 	bl	8000200 <rfm69_write>
	rfm69_write(REGPACKETCONFIG2, REGPACKETCONFIG2_DEF);
 800063e:	2142      	movs	r1, #66	; 0x42
 8000640:	203d      	movs	r0, #61	; 0x3d
 8000642:	f7ff fddd 	bl	8000200 <rfm69_write>
	rfm69_write(REGTESTDAGC, AFC_LOW_BETA_OFF);
 8000646:	2130      	movs	r1, #48	; 0x30
 8000648:	206f      	movs	r0, #111	; 0x6f
 800064a:	f7ff fdd9 	bl	8000200 <rfm69_write>
	rfm69_write(REGIRQFLAGS2, 1<<FIFOOVERRUN);
 800064e:	2110      	movs	r1, #16
 8000650:	2028      	movs	r0, #40	; 0x28
 8000652:	f7ff fdd5 	bl	8000200 <rfm69_write>
	rfm69_receive_start();
 8000656:	f7ff ff51 	bl	80004fc <rfm69_receive_start>
	if ( rfm69_read(REGRXBW) != REGRXBW_DEF ) {     // проверка SPI
 800065a:	2019      	movs	r0, #25
 800065c:	f7ff fe22 	bl	80002a4 <rfm69_read>
 8000660:	284b      	cmp	r0, #75	; 0x4b
		rfm69_condition = RFM69_SPI_FAILED;
 8000662:	bf1f      	itttt	ne
 8000664:	2201      	movne	r2, #1
 8000666:	4b03      	ldrne	r3, [pc, #12]	; (8000674 <rfm69_init+0x164>)
		return -1;
 8000668:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
		rfm69_condition = RFM69_SPI_FAILED;
 800066c:	701a      	strbne	r2, [r3, #0]
	else	return 0;
 800066e:	bf08      	it	eq
 8000670:	2000      	moveq	r0, #0
}
 8000672:	bd08      	pop	{r3, pc}
 8000674:	2000016a 	.word	0x2000016a

08000678 <rfm69_receive_small_packet>:
	@function
	Функция осуществляет чтение принятого пакета. Данные считываются в глобальный массив packet_buffer.
	@return размер считанного пакета, а если размер пакета превышает размер буфера возвращает -1
*/
int rfm69_receive_small_packet(void)
{
 8000678:	b570      	push	{r4, r5, r6, lr}
	int i;

	packet_size = rfm69_read(REGFIFO);										// считывание размера пакета
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff fe12 	bl	80002a4 <rfm69_read>
 8000680:	4c0c      	ldr	r4, [pc, #48]	; (80006b4 <rfm69_receive_small_packet+0x3c>)
	if(packet_size > RFM69_BUFFER_SIZE)	return -1;							// проверка его размера
 8000682:	2842      	cmp	r0, #66	; 0x42
	packet_size = rfm69_read(REGFIFO);										// считывание размера пакета
 8000684:	7020      	strb	r0, [r4, #0]
	if(packet_size > RFM69_BUFFER_SIZE)	return -1;							// проверка его размера
 8000686:	d812      	bhi.n	80006ae <rfm69_receive_small_packet+0x36>

	rfm69_read(REGFIFO);													// отбрасывается адрес
	--packet_size;	

	for(i=0 ; i<packet_size ; ++i) packet_buffer[i] = rfm69_read(REGFIFO);	// чтение пакета из FIFO
 8000688:	2500      	movs	r5, #0
	rfm69_read(REGFIFO);													// отбрасывается адрес
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff fe0a 	bl	80002a4 <rfm69_read>
	--packet_size;	
 8000690:	7823      	ldrb	r3, [r4, #0]
 8000692:	4e09      	ldr	r6, [pc, #36]	; (80006b8 <rfm69_receive_small_packet+0x40>)
 8000694:	3b01      	subs	r3, #1
 8000696:	7023      	strb	r3, [r4, #0]
	for(i=0 ; i<packet_size ; ++i) packet_buffer[i] = rfm69_read(REGFIFO);	// чтение пакета из FIFO
 8000698:	7820      	ldrb	r0, [r4, #0]
 800069a:	4285      	cmp	r5, r0
 800069c:	db00      	blt.n	80006a0 <rfm69_receive_small_packet+0x28>

	return packet_size;
}
 800069e:	bd70      	pop	{r4, r5, r6, pc}
	for(i=0 ; i<packet_size ; ++i) packet_buffer[i] = rfm69_read(REGFIFO);	// чтение пакета из FIFO
 80006a0:	2000      	movs	r0, #0
 80006a2:	f7ff fdff 	bl	80002a4 <rfm69_read>
 80006a6:	3501      	adds	r5, #1
 80006a8:	f806 0b01 	strb.w	r0, [r6], #1
 80006ac:	e7f4      	b.n	8000698 <rfm69_receive_small_packet+0x20>
	if(packet_size > RFM69_BUFFER_SIZE)	return -1;							// проверка его размера
 80006ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006b2:	e7f4      	b.n	800069e <rfm69_receive_small_packet+0x26>
 80006b4:	20000169 	.word	0x20000169
 80006b8:	20000129 	.word	0x20000129

080006bc <rfm69_sleep>:
/**
	@function
	Переключает радиомодуль в спящий режим.
*/
void rfm69_sleep(void)
{
 80006bc:	b508      	push	{r3, lr}
	rfm69_write(REGOPMODE, REGOPMODE_DEF | SLEEP_MODE);
 80006be:	2100      	movs	r1, #0
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff fd9d 	bl	8000200 <rfm69_write>
	rfm69_condition = RFM69_SLEEP;
 80006c6:	2202      	movs	r2, #2
 80006c8:	4b01      	ldr	r3, [pc, #4]	; (80006d0 <rfm69_sleep+0x14>)
 80006ca:	701a      	strb	r2, [r3, #0]
}
 80006cc:	bd08      	pop	{r3, pc}
 80006ce:	bf00      	nop
 80006d0:	2000016a 	.word	0x2000016a

080006d4 <rfm69_stby>:
/**
	@function
	Переключает радиомодуль в режим standby (режим ожидания).
*/
void rfm69_stby(void)
{
 80006d4:	b508      	push	{r3, lr}
	rfm69_write(REGOPMODE, REGOPMODE_DEF | STBY_MODE);
 80006d6:	2104      	movs	r1, #4
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff fd91 	bl	8000200 <rfm69_write>
	rfm69_condition = RFM69_STBY;
 80006de:	2203      	movs	r2, #3
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <rfm69_stby+0x14>)
 80006e2:	701a      	strb	r2, [r3, #0]
}
 80006e4:	bd08      	pop	{r3, pc}
 80006e6:	bf00      	nop
 80006e8:	2000016a 	.word	0x2000016a

080006ec <EXTI0_IRQHandler>:
{
 80006ec:	b508      	push	{r3, lr}
    switch(rfm69_condition)
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <EXTI0_IRQHandler+0x24>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d006      	beq.n	8000704 <EXTI0_IRQHandler+0x18>
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d007      	beq.n	800070a <EXTI0_IRQHandler+0x1e>
}
 80006fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    EXTI_ClearITPendingBit(SyncAddr_Line);
 80006fe:	2001      	movs	r0, #1
 8000700:	f000 b946 	b.w	8000990 <EXTI_ClearITPendingBit>
            rfm69_sleep();
 8000704:	f7ff ffda 	bl	80006bc <rfm69_sleep>
            break;
 8000708:	e7f7      	b.n	80006fa <EXTI0_IRQHandler+0xe>
            rfm69_stby();
 800070a:	f7ff ffe3 	bl	80006d4 <rfm69_stby>
            break;
 800070e:	e7f4      	b.n	80006fa <EXTI0_IRQHandler+0xe>
 8000710:	2000016a 	.word	0x2000016a

08000714 <rfm69_clear_fifo>:
/**
	@function
	Обнуляет буфер радиомодуля.
*/
void rfm69_clear_fifo(void)
{
 8000714:	b510      	push	{r4, lr}
 8000716:	2442      	movs	r4, #66	; 0x42
    int i;
    for(i=0 ; i<RFM69_BUFFER_SIZE ; ++i)   rfm69_read(REGFIFO);
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff fdc3 	bl	80002a4 <rfm69_read>
 800071e:	3c01      	subs	r4, #1
 8000720:	d1fa      	bne.n	8000718 <rfm69_clear_fifo+0x4>
    rfm69_write(REGIRQFLAGS2, 1<<FIFOOVERRUN);
 8000722:	2110      	movs	r1, #16
}
 8000724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rfm69_write(REGIRQFLAGS2, 1<<FIFOOVERRUN);
 8000728:	2028      	movs	r0, #40	; 0x28
 800072a:	f7ff bd69 	b.w	8000200 <rfm69_write>
	...

08000730 <EXTI2_IRQHandler>:
{
 8000730:	b510      	push	{r4, lr}
    switch(rfm69_condition)
 8000732:	4c14      	ldr	r4, [pc, #80]	; (8000784 <EXTI2_IRQHandler+0x54>)
 8000734:	7823      	ldrb	r3, [r4, #0]
 8000736:	3b02      	subs	r3, #2
 8000738:	2b03      	cmp	r3, #3
 800073a:	d805      	bhi.n	8000748 <EXTI2_IRQHandler+0x18>
 800073c:	e8df f003 	tbb	[pc, r3]
 8000740:	1a0c0902 	.word	0x1a0c0902
            rfm69_sleep();
 8000744:	f7ff ffba 	bl	80006bc <rfm69_sleep>
}
 8000748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    EXTI_ClearITPendingBit(CRCOK_PKSent_Line);
 800074c:	2004      	movs	r0, #4
 800074e:	f000 b91f 	b.w	8000990 <EXTI_ClearITPendingBit>
            rfm69_stby();
 8000752:	f7ff ffbf 	bl	80006d4 <rfm69_stby>
            break;
 8000756:	e7f7      	b.n	8000748 <EXTI2_IRQHandler+0x18>
            if(rfm69_read(REGIRQFLAGS2) & (1<<PAYLOADREADY))
 8000758:	2028      	movs	r0, #40	; 0x28
 800075a:	f7ff fda3 	bl	80002a4 <rfm69_read>
 800075e:	0742      	lsls	r2, r0, #29
 8000760:	d5f2      	bpl.n	8000748 <EXTI2_IRQHandler+0x18>
                rfm69_receive_small_packet();
 8000762:	f7ff ff89 	bl	8000678 <rfm69_receive_small_packet>
                rfm69_stby();
 8000766:	f7ff ffb5 	bl	80006d4 <rfm69_stby>
                rfm69_clear_fifo();
 800076a:	f7ff ffd3 	bl	8000714 <rfm69_clear_fifo>
                rfm69_condition = RFM69_NEW_PACK;
 800076e:	2306      	movs	r3, #6
 8000770:	7023      	strb	r3, [r4, #0]
 8000772:	e7e9      	b.n	8000748 <EXTI2_IRQHandler+0x18>
            if(rfm69_read(REGIRQFLAGS2) & (1<<PACKETSENT))
 8000774:	2028      	movs	r0, #40	; 0x28
 8000776:	f7ff fd95 	bl	80002a4 <rfm69_read>
 800077a:	0703      	lsls	r3, r0, #28
 800077c:	d5e4      	bpl.n	8000748 <EXTI2_IRQHandler+0x18>
                rfm69_receive_start();
 800077e:	f7ff febd 	bl	80004fc <rfm69_receive_start>
 8000782:	e7e1      	b.n	8000748 <EXTI2_IRQHandler+0x18>
 8000784:	2000016a 	.word	0x2000016a

08000788 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <NVIC_PriorityGroupConfig+0x10>)
 800078a:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800078e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000792:	60d8      	str	r0, [r3, #12]
}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800079c:	b570      	push	{r4, r5, r6, lr}
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800079e:	2501      	movs	r5, #1
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80007a0:	7801      	ldrb	r1, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80007a2:	f001 031f 	and.w	r3, r1, #31
 80007a6:	409d      	lsls	r5, r3
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80007a8:	78c3      	ldrb	r3, [r0, #3]
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007aa:	094c      	lsrs	r4, r1, #5
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80007ac:	b1c3      	cbz	r3, 80007e0 <NVIC_Init+0x44>
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <NVIC_Init+0x50>)
 80007b0:	68da      	ldr	r2, [r3, #12]
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80007b2:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80007b4:	43d2      	mvns	r2, r2
 80007b6:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 80007ba:	f1c2 0604 	rsb	r6, r2, #4
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80007be:	fa03 f606 	lsl.w	r6, r3, r6
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80007c2:	7883      	ldrb	r3, [r0, #2]
    tmpsub = tmpsub >> tmppriority;
 80007c4:	200f      	movs	r0, #15
 80007c6:	fa20 f202 	lsr.w	r2, r0, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80007ca:	4013      	ands	r3, r2
 80007cc:	4333      	orrs	r3, r6
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <NVIC_Init+0x54>)
    tmppriority = tmppriority << 0x04;
 80007d0:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4411      	add	r1, r2
 80007d6:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007da:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80007de:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <NVIC_Init+0x54>)
 80007e2:	3420      	adds	r4, #32
 80007e4:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
}
 80007e8:	e7f9      	b.n	80007de <NVIC_Init+0x42>
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00
 80007f0:	e000e100 	.word	0xe000e100

080007f4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80007f8:	78cb      	ldrb	r3, [r1, #3]
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80007fa:	880f      	ldrh	r7, [r1, #0]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80007fc:	06da      	lsls	r2, r3, #27
 80007fe:	bf48      	it	mi
 8000800:	788a      	ldrbmi	r2, [r1, #2]
 8000802:	f003 050f 	and.w	r5, r3, #15
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000806:	bf48      	it	mi
 8000808:	4315      	orrmi	r5, r2
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800080a:	780a      	ldrb	r2, [r1, #0]
 800080c:	b1d2      	cbz	r2, 8000844 <GPIO_Init+0x50>
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800080e:	2100      	movs	r1, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000810:	f04f 0c01 	mov.w	ip, #1
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000814:	f04f 0e0f 	mov.w	lr, #15
    tmpreg = GPIOx->CRL;
 8000818:	6802      	ldr	r2, [r0, #0]
      pos = ((uint32_t)0x01) << pinpos;
 800081a:	fa0c f601 	lsl.w	r6, ip, r1
      if (currentpin == pos)
 800081e:	ea36 0407 	bics.w	r4, r6, r7
 8000822:	d10b      	bne.n	800083c <GPIO_Init+0x48>
        pos = pinpos << 2;
 8000824:	008c      	lsls	r4, r1, #2
        pinmask = ((uint32_t)0x0F) << pos;
 8000826:	fa0e f804 	lsl.w	r8, lr, r4
        tmpreg &= ~pinmask;
 800082a:	ea22 0208 	bic.w	r2, r2, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800082e:	fa05 f404 	lsl.w	r4, r5, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000832:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 8000834:	ea42 0204 	orr.w	r2, r2, r4
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000838:	d125      	bne.n	8000886 <GPIO_Init+0x92>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800083a:	6146      	str	r6, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800083c:	3101      	adds	r1, #1
 800083e:	2908      	cmp	r1, #8
 8000840:	d1eb      	bne.n	800081a <GPIO_Init+0x26>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000842:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000844:	2fff      	cmp	r7, #255	; 0xff
 8000846:	d91c      	bls.n	8000882 <GPIO_Init+0x8e>
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000848:	2100      	movs	r1, #0
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800084a:	f04f 0c01 	mov.w	ip, #1
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800084e:	f04f 0e0f 	mov.w	lr, #15
    tmpreg = GPIOx->CRH;
 8000852:	6842      	ldr	r2, [r0, #4]
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000854:	f101 0408 	add.w	r4, r1, #8
 8000858:	fa0c f404 	lsl.w	r4, ip, r4
      if (currentpin == pos)
 800085c:	ea34 0607 	bics.w	r6, r4, r7
 8000860:	d10b      	bne.n	800087a <GPIO_Init+0x86>
        pos = pinpos << 2;
 8000862:	008e      	lsls	r6, r1, #2
        pinmask = ((uint32_t)0x0F) << pos;
 8000864:	fa0e f806 	lsl.w	r8, lr, r6
        tmpreg &= ~pinmask;
 8000868:	ea22 0208 	bic.w	r2, r2, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800086c:	fa05 f606 	lsl.w	r6, r5, r6
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000870:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 8000872:	ea42 0206 	orr.w	r2, r2, r6
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000876:	d10a      	bne.n	800088e <GPIO_Init+0x9a>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000878:	6144      	str	r4, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800087a:	3101      	adds	r1, #1
 800087c:	2908      	cmp	r1, #8
 800087e:	d1e9      	bne.n	8000854 <GPIO_Init+0x60>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000880:	6042      	str	r2, [r0, #4]
  }
}
 8000882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000886:	2b48      	cmp	r3, #72	; 0x48
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000888:	bf08      	it	eq
 800088a:	6106      	streq	r6, [r0, #16]
 800088c:	e7d6      	b.n	800083c <GPIO_Init+0x48>
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800088e:	2b48      	cmp	r3, #72	; 0x48
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000890:	bf08      	it	eq
 8000892:	6104      	streq	r4, [r0, #16]
 8000894:	e7f1      	b.n	800087a <GPIO_Init+0x86>

08000896 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800089a:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800089c:	f240 4302 	movw	r3, #1026	; 0x402
 80008a0:	8043      	strh	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
}
 80008a2:	4770      	bx	lr

080008a4 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80008a4:	6101      	str	r1, [r0, #16]
}
 80008a6:	4770      	bx	lr

080008a8 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80008a8:	6141      	str	r1, [r0, #20]
}
 80008aa:	4770      	bx	lr

080008ac <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80008ac:	b510      	push	{r4, lr}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80008ae:	240f      	movs	r4, #15
 80008b0:	f001 0303 	and.w	r3, r1, #3
 80008b4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80008b8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80008bc:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80008c0:	688a      	ldr	r2, [r1, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	409c      	lsls	r4, r3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80008c6:	ea22 0204 	bic.w	r2, r2, r4
 80008ca:	608a      	str	r2, [r1, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80008cc:	688a      	ldr	r2, [r1, #8]
 80008ce:	4098      	lsls	r0, r3
 80008d0:	4310      	orrs	r0, r2
 80008d2:	6088      	str	r0, [r1, #8]
}
 80008d4:	bd10      	pop	{r4, pc}
	...

080008d8 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80008d8:	4b01      	ldr	r3, [pc, #4]	; (80008e0 <RCC_USBCLKConfig+0x8>)
 80008da:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
}
 80008de:	4770      	bx	lr
 80008e0:	42420000 	.word	0x42420000

080008e4 <RCC_APB2PeriphClockCmd>:
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <RCC_APB2PeriphClockCmd+0x14>)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80008e6:	699a      	ldr	r2, [r3, #24]
  if (NewState != DISABLE)
 80008e8:	b111      	cbz	r1, 80008f0 <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 80008ea:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008ec:	6198      	str	r0, [r3, #24]
  }
}
 80008ee:	4770      	bx	lr
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008f0:	ea22 0000 	bic.w	r0, r2, r0
 80008f4:	e7fa      	b.n	80008ec <RCC_APB2PeriphClockCmd+0x8>
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <RCC_APB1PeriphClockCmd>:
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <RCC_APB1PeriphClockCmd+0x14>)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80008fe:	69da      	ldr	r2, [r3, #28]
  if (NewState != DISABLE)
 8000900:	b111      	cbz	r1, 8000908 <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 8000902:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000904:	61d8      	str	r0, [r3, #28]
  }
}
 8000906:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000908:	ea22 0000 	bic.w	r0, r2, r0
 800090c:	e7fa      	b.n	8000904 <RCC_APB1PeriphClockCmd+0x8>
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000

08000914 <EXTI_Init>:
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000914:	7902      	ldrb	r2, [r0, #4]
{
 8000916:	b530      	push	{r4, r5, lr}
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000918:	7983      	ldrb	r3, [r0, #6]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800091a:	6805      	ldr	r5, [r0, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;
 800091c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000920:	43e9      	mvns	r1, r5
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000922:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000926:	b323      	cbz	r3, 8000972 <EXTI_Init+0x5e>
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <EXTI_Init+0x68>)
 800092a:	681c      	ldr	r4, [r3, #0]
 800092c:	400c      	ands	r4, r1
 800092e:	601c      	str	r4, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000930:	685c      	ldr	r4, [r3, #4]
 8000932:	4021      	ands	r1, r4
 8000934:	6059      	str	r1, [r3, #4]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000936:	6811      	ldr	r1, [r2, #0]
 8000938:	4329      	orrs	r1, r5
 800093a:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800093c:	6899      	ldr	r1, [r3, #8]
 800093e:	6802      	ldr	r2, [r0, #0]
 8000940:	ea21 0102 	bic.w	r1, r1, r2
 8000944:	6099      	str	r1, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000946:	68d9      	ldr	r1, [r3, #12]
 8000948:	ea21 0102 	bic.w	r1, r1, r2
 800094c:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800094e:	7941      	ldrb	r1, [r0, #5]
 8000950:	2910      	cmp	r1, #16
 8000952:	d106      	bne.n	8000962 <EXTI_Init+0x4e>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000954:	6899      	ldr	r1, [r3, #8]
 8000956:	4311      	orrs	r1, r2
 8000958:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800095a:	68d9      	ldr	r1, [r3, #12]
 800095c:	430a      	orrs	r2, r1
 800095e:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000960:	bd30      	pop	{r4, r5, pc}
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000962:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8000966:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800096a:	6819      	ldr	r1, [r3, #0]
 800096c:	430a      	orrs	r2, r1
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	e7f6      	b.n	8000960 <EXTI_Init+0x4c>
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000972:	6813      	ldr	r3, [r2, #0]
 8000974:	400b      	ands	r3, r1
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	e7f2      	b.n	8000960 <EXTI_Init+0x4c>
 800097a:	bf00      	nop
 800097c:	40010400 	.word	0x40010400

08000980 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8000980:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8000982:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8000986:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8000988:	8082      	strh	r2, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800098a:	7183      	strb	r3, [r0, #6]
}
 800098c:	4770      	bx	lr
	...

08000990 <EXTI_ClearITPendingBit>:
 8000990:	4b01      	ldr	r3, [pc, #4]	; (8000998 <EXTI_ClearITPendingBit+0x8>)
 8000992:	6158      	str	r0, [r3, #20]
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40010400 	.word	0x40010400

0800099c <SPI_Init>:
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800099c:	8803      	ldrh	r3, [r0, #0]
{
 800099e:	b510      	push	{r4, lr}
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80009a0:	f403 5241 	and.w	r2, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80009a4:	884c      	ldrh	r4, [r1, #2]
 80009a6:	880b      	ldrh	r3, [r1, #0]
 80009a8:	4323      	orrs	r3, r4
 80009aa:	888c      	ldrh	r4, [r1, #4]
 80009ac:	4323      	orrs	r3, r4
 80009ae:	88cc      	ldrh	r4, [r1, #6]
 80009b0:	4323      	orrs	r3, r4
 80009b2:	890c      	ldrh	r4, [r1, #8]
 80009b4:	4323      	orrs	r3, r4
 80009b6:	894c      	ldrh	r4, [r1, #10]
 80009b8:	4323      	orrs	r3, r4
 80009ba:	898c      	ldrh	r4, [r1, #12]
 80009bc:	4323      	orrs	r3, r4
 80009be:	89cc      	ldrh	r4, [r1, #14]
 80009c0:	4323      	orrs	r3, r4
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80009c6:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80009c8:	8b83      	ldrh	r3, [r0, #28]
 80009ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009ce:	041b      	lsls	r3, r3, #16
 80009d0:	0c1b      	lsrs	r3, r3, #16
 80009d2:	8383      	strh	r3, [r0, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80009d4:	8a0b      	ldrh	r3, [r1, #16]
 80009d6:	8203      	strh	r3, [r0, #16]
}
 80009d8:	bd10      	pop	{r4, pc}

080009da <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80009da:	2300      	movs	r3, #0
 80009dc:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80009de:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80009e0:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80009e2:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80009e4:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80009e6:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80009e8:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80009ea:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80009ec:	2307      	movs	r3, #7
 80009ee:	8203      	strh	r3, [r0, #16]
}
 80009f0:	4770      	bx	lr

080009f2 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80009f2:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 80009f4:	b121      	cbz	r1, 8000a00 <SPI_Cmd+0xe>
    SPIx->CR1 |= CR1_SPE_Set;
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 80009fc:	8003      	strh	r3, [r0, #0]
  }
}
 80009fe:	4770      	bx	lr
    SPIx->CR1 &= CR1_SPE_Reset;
 8000a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a04:	041b      	lsls	r3, r3, #16
 8000a06:	0c1b      	lsrs	r3, r3, #16
 8000a08:	e7f8      	b.n	80009fc <SPI_Cmd+0xa>

08000a0a <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000a0a:	8181      	strh	r1, [r0, #12]
}
 8000a0c:	4770      	bx	lr

08000a0e <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000a0e:	8980      	ldrh	r0, [r0, #12]
}
 8000a10:	b280      	uxth	r0, r0
 8000a12:	4770      	bx	lr

08000a14 <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8000a14:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8000a18:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8000a1a:	8803      	ldrh	r3, [r0, #0]
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8000a1c:	bf0b      	itete	eq
 8000a1e:	f423 7380 	biceq.w	r3, r3, #256	; 0x100
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8000a22:	b29b      	uxthne	r3, r3
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8000a24:	041b      	lsleq	r3, r3, #16
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8000a26:	f443 7380 	orrne.w	r3, r3, #256	; 0x100
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8000a2a:	bf08      	it	eq
 8000a2c:	0c1b      	lsreq	r3, r3, #16
 8000a2e:	8003      	strh	r3, [r0, #0]
  }
}
 8000a30:	4770      	bx	lr

08000a32 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8000a32:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 8000a34:	b121      	cbz	r1, 8000a40 <SPI_SSOutputCmd+0xe>
    SPIx->CR2 |= CR2_SSOE_Set;
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	f043 0304 	orr.w	r3, r3, #4
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000a3c:	8083      	strh	r3, [r0, #4]
  }
}
 8000a3e:	4770      	bx	lr
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000a40:	f023 0304 	bic.w	r3, r3, #4
 8000a44:	041b      	lsls	r3, r3, #16
 8000a46:	0c1b      	lsrs	r3, r3, #16
 8000a48:	e7f8      	b.n	8000a3c <SPI_SSOutputCmd+0xa>

08000a4a <SPI_I2S_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000a4a:	8903      	ldrh	r3, [r0, #8]
 8000a4c:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8000a4e:	bf14      	ite	ne
 8000a50:	2001      	movne	r0, #1
 8000a52:	2000      	moveq	r0, #0
 8000a54:	4770      	bx	lr

08000a56 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8000a56:	2300      	movs	r3, #0
 8000a58:	b570      	push	{r4, r5, r6, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[ 2* idx + 1] = 0;
 8000a5a:	461e      	mov	r6, r3
 8000a5c:	1c4d      	adds	r5, r1, #1
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000a5e:	0f04      	lsrs	r4, r0, #28
    if( ((value >> 28)) < 0xA )
 8000a60:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000a64:	bf34      	ite	cc
 8000a66:	3430      	addcc	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10;
 8000a68:	3437      	addcs	r4, #55	; 0x37
 8000a6a:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 8000a6e:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for( idx = 0 ; idx < len ; idx ++)
 8000a72:	3301      	adds	r3, #1
 8000a74:	b2dc      	uxtb	r4, r3
 8000a76:	42a2      	cmp	r2, r4
    value = value << 4;
 8000a78:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for( idx = 0 ; idx < len ; idx ++)
 8000a7c:	d8ef      	bhi.n	8000a5e <IntToUnicode+0x8>
  }
}
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}

08000a80 <Set_System>:
{
 8000a80:	b508      	push	{r3, lr}
  EXTI_ClearITPendingBit(EXTI_Line18);
 8000a82:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000a86:	f7ff ff83 	bl	8000990 <EXTI_ClearITPendingBit>
  EXTI_InitStructure.EXTI_Line = EXTI_Line18;
 8000a8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <Set_System+0x24>)
 8000a90:	6003      	str	r3, [r0, #0]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000a92:	2308      	movs	r3, #8
 8000a94:	7143      	strb	r3, [r0, #5]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000a96:	2301      	movs	r3, #1
 8000a98:	7183      	strb	r3, [r0, #6]
}
 8000a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  EXTI_Init(&EXTI_InitStructure);
 8000a9e:	f7ff bf39 	b.w	8000914 <EXTI_Init>
 8000aa2:	bf00      	nop
 8000aa4:	2000016c 	.word	0x2000016c

08000aa8 <Set_USBClock>:
{
 8000aa8:	b508      	push	{r3, lr}
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff ff14 	bl	80008d8 <RCC_USBCLKConfig>
}
 8000ab0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000aba:	f7ff bf1f 	b.w	80008fc <RCC_APB1PeriphClockCmd>
	...

08000ac0 <Leave_LowPowerMode>:
  if (pInfo->Current_Configuration != 0)
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <Leave_LowPowerMode+0x14>)
 8000ac2:	7a9a      	ldrb	r2, [r3, #10]
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <Leave_LowPowerMode+0x18>)
 8000ac6:	b11a      	cbz	r2, 8000ad0 <Leave_LowPowerMode+0x10>
    bDeviceState = CONFIGURED;
 8000ac8:	2205      	movs	r2, #5
    bDeviceState = ATTACHED;
 8000aca:	601a      	str	r2, [r3, #0]
  SystemInit();
 8000acc:	f001 b9f0 	b.w	8001eb0 <SystemInit>
    bDeviceState = ATTACHED;
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	e7fa      	b.n	8000aca <Leave_LowPowerMode+0xa>
 8000ad4:	200001bc 	.word	0x200001bc
 8000ad8:	200001b0 	.word	0x200001b0

08000adc <USB_Interrupts_Config>:
{
 8000adc:	b513      	push	{r0, r1, r4, lr}
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8000ade:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000ae2:	f7ff fe51 	bl	8000788 <NVIC_PriorityGroupConfig>
  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 8000ae6:	2314      	movs	r3, #20
 8000ae8:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8000aec:	2302      	movs	r3, #2
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000aee:	2400      	movs	r4, #0
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8000af0:	f88d 3005 	strb.w	r3, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000af4:	2301      	movs	r3, #1
  NVIC_Init(&NVIC_InitStructure);
 8000af6:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000af8:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000afc:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_Init(&NVIC_InitStructure);
 8000b00:	f7ff fe4c 	bl	800079c <NVIC_Init>
  NVIC_InitStructure.NVIC_IRQChannel = USBWakeUp_IRQn;
 8000b04:	232a      	movs	r3, #42	; 0x2a
  NVIC_Init(&NVIC_InitStructure);
 8000b06:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannel = USBWakeUp_IRQn;
 8000b08:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000b0c:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_Init(&NVIC_InitStructure);
 8000b10:	f7ff fe44 	bl	800079c <NVIC_Init>
}
 8000b14:	b002      	add	sp, #8
 8000b16:	bd10      	pop	{r4, pc}

08000b18 <USB_Cable_Config>:
    GPIO_ResetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
 8000b18:	f44f 7100 	mov.w	r1, #512	; 0x200
  if (NewState != DISABLE)
 8000b1c:	b110      	cbz	r0, 8000b24 <USB_Cable_Config+0xc>
    GPIO_ResetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
 8000b1e:	4803      	ldr	r0, [pc, #12]	; (8000b2c <USB_Cable_Config+0x14>)
 8000b20:	f7ff bec2 	b.w	80008a8 <GPIO_ResetBits>
    GPIO_SetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
 8000b24:	4801      	ldr	r0, [pc, #4]	; (8000b2c <USB_Cable_Config+0x14>)
 8000b26:	f7ff bebd 	b.w	80008a4 <GPIO_SetBits>
 8000b2a:	bf00      	nop
 8000b2c:	40011400 	.word	0x40011400

08000b30 <Handle_USBAsynchXfer>:
{
 8000b30:	b538      	push	{r3, r4, r5, lr}
	if(USB_Tx_State == 0)	return;
 8000b32:	4d15      	ldr	r5, [pc, #84]	; (8000b88 <Handle_USBAsynchXfer+0x58>)
 8000b34:	782b      	ldrb	r3, [r5, #0]
 8000b36:	b1a3      	cbz	r3, 8000b62 <Handle_USBAsynchXfer+0x32>
	if(rfm69_condition == RFM69_NEW_PACK)
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <Handle_USBAsynchXfer+0x5c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b06      	cmp	r3, #6
 8000b3e:	d111      	bne.n	8000b64 <Handle_USBAsynchXfer+0x34>
		UserToPMABufferCopy(packet_buffer, ENDP1_TXADDR, packet_size);
 8000b40:	4c13      	ldr	r4, [pc, #76]	; (8000b90 <Handle_USBAsynchXfer+0x60>)
 8000b42:	21c0      	movs	r1, #192	; 0xc0
 8000b44:	7822      	ldrb	r2, [r4, #0]
 8000b46:	4813      	ldr	r0, [pc, #76]	; (8000b94 <Handle_USBAsynchXfer+0x64>)
 8000b48:	f001 f83e 	bl	8001bc8 <UserToPMABufferCopy>
		SetEPTxCount(ENDP1, packet_size);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	7821      	ldrb	r1, [r4, #0]
 8000b50:	f001 f944 	bl	8001ddc <SetEPTxCount>
		rfm69_receive_start();
 8000b54:	f7ff fcd2 	bl	80004fc <rfm69_receive_start>
		SetEPTxValid(ENDP1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f001 f89d 	bl	8001c98 <SetEPTxValid>
    USB_Tx_State = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	702b      	strb	r3, [r5, #0]
}
 8000b62:	bd38      	pop	{r3, r4, r5, pc}
	else if (internal_pack_size)
 8000b64:	4c0c      	ldr	r4, [pc, #48]	; (8000b98 <Handle_USBAsynchXfer+0x68>)
 8000b66:	7822      	ldrb	r2, [r4, #0]
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	d0f8      	beq.n	8000b5e <Handle_USBAsynchXfer+0x2e>
        UserToPMABufferCopy(internal_packet_buffer, ENDP1_TXADDR, internal_pack_size);
 8000b6c:	21c0      	movs	r1, #192	; 0xc0
 8000b6e:	480b      	ldr	r0, [pc, #44]	; (8000b9c <Handle_USBAsynchXfer+0x6c>)
 8000b70:	f001 f82a 	bl	8001bc8 <UserToPMABufferCopy>
        SetEPTxCount(ENDP1, internal_pack_size);
 8000b74:	2001      	movs	r0, #1
 8000b76:	7821      	ldrb	r1, [r4, #0]
 8000b78:	f001 f930 	bl	8001ddc <SetEPTxCount>
        SetEPTxValid(ENDP1);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f001 f88b 	bl	8001c98 <SetEPTxValid>
        internal_pack_size = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	7023      	strb	r3, [r4, #0]
 8000b86:	e7ea      	b.n	8000b5e <Handle_USBAsynchXfer+0x2e>
 8000b88:	20000174 	.word	0x20000174
 8000b8c:	2000016a 	.word	0x2000016a
 8000b90:	20000169 	.word	0x20000169
 8000b94:	20000129 	.word	0x20000129
 8000b98:	200000e8 	.word	0x200000e8
 8000b9c:	200000e9 	.word	0x200000e9

08000ba0 <Get_SerialNum>:
  Device_Serial0 = *(uint32_t*)ID1;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <Get_SerialNum+0x2c>)
{
 8000ba2:	b510      	push	{r4, lr}
  Device_Serial0 = *(uint32_t*)ID1;
 8000ba4:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  Device_Serial0 += Device_Serial2;
 8000ba8:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (Device_Serial0 != 0)
 8000bac:	1880      	adds	r0, r0, r2
 8000bae:	d00c      	beq.n	8000bca <Get_SerialNum+0x2a>
  Device_Serial1 = *(uint32_t*)ID2;
 8000bb0:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8000bb4:	4906      	ldr	r1, [pc, #24]	; (8000bd0 <Get_SerialNum+0x30>)
 8000bb6:	2208      	movs	r2, #8
 8000bb8:	f7ff ff4d 	bl	8000a56 <IntToUnicode>
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8000bbc:	4620      	mov	r0, r4
}
 8000bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	3110      	adds	r1, #16
 8000bc6:	f7ff bf46 	b.w	8000a56 <IntToUnicode>
}
 8000bca:	bd10      	pop	{r4, pc}
 8000bcc:	1ffff000 	.word	0x1ffff000
 8000bd0:	20000002 	.word	0x20000002

08000bd4 <NMI_Handler>:
* Output         : None
* Return         : None
*******************************************************************************/
void NMI_Handler(void)
{
}
 8000bd4:	4770      	bx	lr

08000bd6 <HardFault_Handler>:
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler>

08000bd8 <MemManage_Handler>:
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler>

08000bda <BusFault_Handler>:
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler>

08000bdc <UsageFault_Handler>:
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler>

08000bde <SVC_Handler>:
 8000bde:	4770      	bx	lr

08000be0 <DebugMon_Handler>:
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:
 8000be2:	4770      	bx	lr

08000be4 <SysTick_Handler>:
 8000be4:	4770      	bx	lr

08000be6 <USB_LP_CAN1_RX0_IRQHandler>:
* Return         : None
*******************************************************************************/

void USB_LP_CAN1_RX0_IRQHandler(void)
{
  USB_Istr();
 8000be6:	f000 b835 	b.w	8000c54 <USB_Istr>

08000bea <USBWakeUp_IRQHandler>:
*******************************************************************************/


void USBWakeUp_IRQHandler(void)
{
  EXTI_ClearITPendingBit(EXTI_Line18);
 8000bea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000bee:	f7ff becf 	b.w	8000990 <EXTI_ClearITPendingBit>

08000bf2 <EP1_IN_Callback>:
      SetEPTxCount(ENDP1, USB_Tx_length);
      SetEPTxValid(ENDP1);
    }
  }
*/
	Handle_USBAsynchXfer();
 8000bf2:	f7ff bf9d 	b.w	8000b30 <Handle_USBAsynchXfer>
	...

08000bf8 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8000bf8:	b508      	push	{r3, lr}
  /* Get the received data buffer and update the counter */
  packet_size = USB_SIL_Read(EP3_OUT, packet_buffer);
 8000bfa:	4907      	ldr	r1, [pc, #28]	; (8000c18 <EP3_OUT_Callback+0x20>)
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f001 f945 	bl	8001e8c <USB_SIL_Read>
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <EP3_OUT_Callback+0x24>)
 8000c04:	b2c0      	uxtb	r0, r0

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the USART Xfer */

  rfm69_transmit_start(packet_size, 0x05);
 8000c06:	2105      	movs	r1, #5
  packet_size = USB_SIL_Read(EP3_OUT, packet_buffer);
 8000c08:	7018      	strb	r0, [r3, #0]
  rfm69_transmit_start(packet_size, 0x05);
 8000c0a:	f7ff fc49 	bl	80004a0 <rfm69_transmit_start>
//  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);

  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
}
 8000c0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SetEPRxValid(ENDP3);
 8000c12:	2003      	movs	r0, #3
 8000c14:	f001 b853 	b.w	8001cbe <SetEPRxValid>
 8000c18:	20000129 	.word	0x20000129
 8000c1c:	20000169 	.word	0x20000169

08000c20 <SOF_Callback>:
*******************************************************************************/
void SOF_Callback(void)
{
  static uint32_t FrameCount = 0;

  if(bDeviceState == CONFIGURED)
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <SOF_Callback+0x28>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b05      	cmp	r3, #5
 8000c26:	d10e      	bne.n	8000c46 <SOF_Callback+0x26>
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <SOF_Callback+0x2c>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	2a05      	cmp	r2, #5
 8000c2e:	f102 0101 	add.w	r1, r2, #1
 8000c32:	d001      	beq.n	8000c38 <SOF_Callback+0x18>
 8000c34:	6019      	str	r1, [r3, #0]
 8000c36:	4770      	bx	lr
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]

      /* Check the data to be sent through IN pipe */
      USB_Tx_State = 1;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SOF_Callback+0x30>)
 8000c40:	701a      	strb	r2, [r3, #0]
      Handle_USBAsynchXfer();
 8000c42:	f7ff bf75 	b.w	8000b30 <Handle_USBAsynchXfer>
    }
  }
}
 8000c46:	4770      	bx	lr
 8000c48:	200001b0 	.word	0x200001b0
 8000c4c:	20000178 	.word	0x20000178
 8000c50:	20000174 	.word	0x20000174

08000c54 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8000c54:	4a5b      	ldr	r2, [pc, #364]	; (8000dc4 <USB_Istr+0x170>)
{
 8000c56:	b530      	push	{r4, r5, lr}
  wIstr = _GetISTR();
 8000c58:	f8d2 3c44 	ldr.w	r3, [r2, #3140]	; 0xc44
 8000c5c:	4c5a      	ldr	r4, [pc, #360]	; (8000dc8 <USB_Istr+0x174>)
 8000c5e:	b29b      	uxth	r3, r3

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000c60:	4d5a      	ldr	r5, [pc, #360]	; (8000dcc <USB_Istr+0x178>)
  wIstr = _GetISTR();
 8000c62:	8023      	strh	r3, [r4, #0]
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000c64:	8823      	ldrh	r3, [r4, #0]
 8000c66:	8829      	ldrh	r1, [r5, #0]
{
 8000c68:	b089      	sub	sp, #36	; 0x24
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000c6a:	400b      	ands	r3, r1
 8000c6c:	059b      	lsls	r3, r3, #22
 8000c6e:	d50a      	bpl.n	8000c86 <USB_Istr+0x32>
  {
    _SetISTR((uint16_t)CLR_SOF);
 8000c70:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8000c74:	f8c2 3c44 	str.w	r3, [r2, #3140]	; 0xc44
    bIntPackSOF++;
 8000c78:	4a55      	ldr	r2, [pc, #340]	; (8000dd0 <USB_Istr+0x17c>)
 8000c7a:	7813      	ldrb	r3, [r2, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	7013      	strb	r3, [r2, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8000c82:	f7ff ffcd 	bl	8000c20 <SOF_Callback>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8000c86:	8823      	ldrh	r3, [r4, #0]
 8000c88:	882a      	ldrh	r2, [r5, #0]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	0418      	lsls	r0, r3, #16
 8000c8e:	d501      	bpl.n	8000c94 <USB_Istr+0x40>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8000c90:	f000 fed0 	bl	8001a34 <CTR_LP>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8000c94:	8823      	ldrh	r3, [r4, #0]
 8000c96:	882a      	ldrh	r2, [r5, #0]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	0559      	lsls	r1, r3, #21
 8000c9c:	d507      	bpl.n	8000cae <USB_Istr+0x5a>
  {
    _SetISTR((uint16_t)CLR_RESET);
 8000c9e:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8000ca2:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <USB_Istr+0x170>)
 8000ca4:	f8c3 2c44 	str.w	r2, [r3, #3140]	; 0xc44
    Device_Property.Reset();
 8000ca8:	4b4a      	ldr	r3, [pc, #296]	; (8000dd4 <USB_Istr+0x180>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	4798      	blx	r3
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8000cae:	8822      	ldrh	r2, [r4, #0]
 8000cb0:	882b      	ldrh	r3, [r5, #0]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	0492      	lsls	r2, r2, #18
  {
    _SetISTR((uint16_t)CLR_ERR);
 8000cb6:	bf42      	ittt	mi
 8000cb8:	f64d 71ff 	movwmi	r1, #57343	; 0xdfff
 8000cbc:	4a41      	ldrmi	r2, [pc, #260]	; (8000dc4 <USB_Istr+0x170>)
 8000cbe:	f8c2 1c44 	strmi.w	r1, [r2, #3140]	; 0xc44
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8000cc2:	8822      	ldrh	r2, [r4, #0]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	d507      	bpl.n	8000cda <USB_Istr+0x86>
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8000cca:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8000cce:	4b3d      	ldr	r3, [pc, #244]	; (8000dc4 <USB_Istr+0x170>)
    Resume(RESUME_EXTERNAL);
 8000cd0:	2000      	movs	r0, #0
    _SetISTR((uint16_t)CLR_WKUP);
 8000cd2:	f8c3 2c44 	str.w	r2, [r3, #3140]	; 0xc44
    Resume(RESUME_EXTERNAL);
 8000cd6:	f000 fa35 	bl	8001144 <Resume>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8000cda:	8823      	ldrh	r3, [r4, #0]
 8000cdc:	882a      	ldrh	r2, [r5, #0]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	0518      	lsls	r0, r3, #20
 8000ce2:	d50a      	bpl.n	8000cfa <USB_Istr+0xa6>
  {

    /* check if SUSPEND is possible */
    if (fSuspendEnabled)
 8000ce4:	4b3c      	ldr	r3, [pc, #240]	; (8000dd8 <USB_Istr+0x184>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d065      	beq.n	8000db8 <USB_Istr+0x164>
    {
      Suspend();
 8000cec:	f000 f9a4 	bl	8001038 <Suspend>
    {
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
    }
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8000cf0:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8000cf4:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <USB_Istr+0x170>)
 8000cf6:	f8c3 2c44 	str.w	r2, [r3, #3140]	; 0xc44
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8000cfa:	8823      	ldrh	r3, [r4, #0]
 8000cfc:	882a      	ldrh	r2, [r5, #0]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	05d9      	lsls	r1, r3, #23
 8000d02:	d55d      	bpl.n	8000dc0 <USB_Istr+0x16c>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8000d04:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8000d08:	4a2e      	ldr	r2, [pc, #184]	; (8000dc4 <USB_Istr+0x170>)
 8000d0a:	4934      	ldr	r1, [pc, #208]	; (8000ddc <USB_Istr+0x188>)
 8000d0c:	f8c2 3c44 	str.w	r3, [r2, #3140]	; 0xc44
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8000d10:	f8d2 3c48 	ldr.w	r3, [r2, #3144]	; 0xc48
 8000d14:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000d18:	d046      	beq.n	8000da8 <USB_Istr+0x154>
    {
      /* increment ESOF counter */
      esof_counter ++;
 8000d1a:	680b      	ldr	r3, [r1, #0]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	600b      	str	r3, [r1, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8000d20:	680b      	ldr	r3, [r1, #0]
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d942      	bls.n	8000dac <USB_Istr+0x158>
 8000d26:	f8d2 3c40 	ldr.w	r3, [r2, #3136]	; 0xc40
 8000d2a:	f013 0308 	ands.w	r3, r3, #8
 8000d2e:	d13d      	bne.n	8000dac <USB_Istr+0x158>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8000d30:	f8d2 0c40 	ldr.w	r0, [r2, #3136]	; 0xc40
 8000d34:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <USB_Istr+0x18c>)
 8000d36:	b280      	uxth	r0, r0
 8000d38:	6010      	str	r0, [r2, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8000d3a:	0098      	lsls	r0, r3, #2
 8000d3c:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
 8000d40:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8000d44:	6824      	ldr	r4, [r4, #0]
 8000d46:	3020      	adds	r0, #32
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	4468      	add	r0, sp
 8000d4e:	2b08      	cmp	r3, #8
 8000d50:	f840 4c20 	str.w	r4, [r0, #-32]
 8000d54:	d1f1      	bne.n	8000d3a <USB_Istr+0xe6>
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8000d56:	6813      	ldr	r3, [r2, #0]
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6013      	str	r3, [r2, #0]
        _SetCNTR(wCNTR);
 8000d5e:	6810      	ldr	r0, [r2, #0]
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <USB_Istr+0x170>)
 8000d62:	b280      	uxth	r0, r0
 8000d64:	f8c3 0c40 	str.w	r0, [r3, #3136]	; 0xc40
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8000d68:	6810      	ldr	r0, [r2, #0]
 8000d6a:	f020 0001 	bic.w	r0, r0, #1
 8000d6e:	6010      	str	r0, [r2, #0]
        _SetCNTR(wCNTR);
 8000d70:	6812      	ldr	r2, [r2, #0]
 8000d72:	b292      	uxth	r2, r2
 8000d74:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8000d78:	f8d3 2c44 	ldr.w	r2, [r3, #3140]	; 0xc44
 8000d7c:	0552      	lsls	r2, r2, #21
 8000d7e:	d5fb      	bpl.n	8000d78 <USB_Istr+0x124>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8000d80:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8000d84:	f8c3 2c44 	str.w	r2, [r3, #3140]	; 0xc44
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8000d88:	2300      	movs	r3, #0
        _SetENDPOINT(i, EP[i]);
 8000d8a:	a808      	add	r0, sp, #32
 8000d8c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8000d90:	f850 0c20 	ldr.w	r0, [r0, #-32]
 8000d94:	009a      	lsls	r2, r3, #2
 8000d96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        for (i=0;i<8;i++)
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8000da0:	b280      	uxth	r0, r0
 8000da2:	2b08      	cmp	r3, #8
        _SetENDPOINT(i, EP[i]);
 8000da4:	6010      	str	r0, [r2, #0]
        for (i=0;i<8;i++)
 8000da6:	d1f0      	bne.n	8000d8a <USB_Istr+0x136>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	600b      	str	r3, [r1, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8000dac:	2007      	movs	r0, #7
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8000dae:	b009      	add	sp, #36	; 0x24
 8000db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8000db4:	f000 b9c6 	b.w	8001144 <Resume>
      Resume(RESUME_LATER);
 8000db8:	2002      	movs	r0, #2
 8000dba:	f000 f9c3 	bl	8001144 <Resume>
 8000dbe:	e797      	b.n	8000cf0 <USB_Istr+0x9c>
} /* USB_Istr */
 8000dc0:	b009      	add	sp, #36	; 0x24
 8000dc2:	bd30      	pop	{r4, r5, pc}
 8000dc4:	40005000 	.word	0x40005000
 8000dc8:	20000188 	.word	0x20000188
 8000dcc:	200001e8 	.word	0x200001e8
 8000dd0:	2000017c 	.word	0x2000017c
 8000dd4:	20000064 	.word	0x20000064
 8000dd8:	200000e4 	.word	0x200000e4
 8000ddc:	20000180 	.word	0x20000180
 8000de0:	20000184 	.word	0x20000184

08000de4 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <Virtual_Com_Port_SetConfiguration+0x10>)
 8000de6:	7a9b      	ldrb	r3, [r3, #10]
 8000de8:	b113      	cbz	r3, 8000df0 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8000dea:	2205      	movs	r2, #5
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <Virtual_Com_Port_SetConfiguration+0x14>)
 8000dee:	601a      	str	r2, [r3, #0]
  }
}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200001bc 	.word	0x200001bc
 8000df8:	200001b0 	.word	0x200001b0

08000dfc <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	4b01      	ldr	r3, [pc, #4]	; (8000e04 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 8000e00:	601a      	str	r2, [r3, #0]
}
 8000e02:	4770      	bx	lr
 8000e04:	200001b0 	.word	0x200001b0

08000e08 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <Virtual_Com_Port_Status_In+0x10>)
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	2a20      	cmp	r2, #32
  {
    Request = 0;
 8000e0e:	bf04      	itt	eq
 8000e10:	2200      	moveq	r2, #0
 8000e12:	701a      	strbeq	r2, [r3, #0]
  }
}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2000018a 	.word	0x2000018a

08000e1c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8000e1c:	4770      	bx	lr
	...

08000e20 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8000e20:	2821      	cmp	r0, #33	; 0x21
{
 8000e22:	b510      	push	{r4, lr}
  if (RequestNo == GET_LINE_CODING)
 8000e24:	d108      	bne.n	8000e38 <Virtual_Com_Port_Data_Setup+0x18>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <Virtual_Com_Port_Data_Setup+0x48>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e30:	2b21      	cmp	r3, #33	; 0x21
 8000e32:	d016      	beq.n	8000e62 <Virtual_Com_Port_Data_Setup+0x42>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8000e34:	2002      	movs	r0, #2
 8000e36:	e013      	b.n	8000e60 <Virtual_Com_Port_Data_Setup+0x40>
  else if (RequestNo == SET_LINE_CODING)
 8000e38:	2820      	cmp	r0, #32
 8000e3a:	d1fb      	bne.n	8000e34 <Virtual_Com_Port_Data_Setup+0x14>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <Virtual_Com_Port_Data_Setup+0x48>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e46:	2b21      	cmp	r3, #33	; 0x21
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <Virtual_Com_Port_Data_Setup+0x4c>)
    Request = SET_LINE_CODING;
 8000e4a:	7018      	strb	r0, [r3, #0]
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000e4c:	d1f2      	bne.n	8000e34 <Virtual_Com_Port_Data_Setup+0x14>
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <Virtual_Com_Port_Data_Setup+0x50>)
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000e50:	2400      	movs	r4, #0
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <Virtual_Com_Port_Data_Setup+0x48>)
  (*CopyRoutine)(0);
 8000e54:	4620      	mov	r0, r4
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000e56:	6812      	ldr	r2, [r2, #0]
 8000e58:	6193      	str	r3, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000e5a:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8000e5c:	4798      	blx	r3
  return USB_SUCCESS;
 8000e5e:	4620      	mov	r0, r4
}
 8000e60:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <Virtual_Com_Port_Data_Setup+0x54>)
 8000e64:	e7f4      	b.n	8000e50 <Virtual_Com_Port_Data_Setup+0x30>
 8000e66:	bf00      	nop
 8000e68:	200001dc 	.word	0x200001dc
 8000e6c:	2000018a 	.word	0x2000018a
 8000e70:	08000ea5 	.word	0x08000ea5
 8000e74:	08000e8d 	.word	0x08000e8d

08000e78 <Virtual_Com_Port_Get_Interface_Setting>:
* Input2         : uint8_t: AlternateSetting : Alternate Setting number.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
 8000e78:	4603      	mov	r3, r0
  if (AlternateSetting > 0)
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	b921      	cbnz	r1, 8000e88 <Virtual_Com_Port_Get_Interface_Setting+0x10>
  {
    return USB_UNSUPPORT;
  }
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	bf34      	ite	cc
 8000e82:	4608      	movcc	r0, r1
 8000e84:	2002      	movcs	r0, #2
 8000e86:	4770      	bx	lr
 8000e88:	2002      	movs	r0, #2
  }
  return USB_SUCCESS;
}
 8000e8a:	4770      	bx	lr

08000e8c <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8000e8c:	b920      	cbnz	r0, 8000e98 <Virtual_Com_Port_GetLineCoding+0xc>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8000e8e:	2208      	movs	r2, #8
 8000e90:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <Virtual_Com_Port_GetLineCoding+0x10>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	821a      	strh	r2, [r3, #16]
    return NULL;
 8000e96:	4770      	bx	lr
  }
  return(uint8_t *)&linecoding;
 8000e98:	4801      	ldr	r0, [pc, #4]	; (8000ea0 <Virtual_Com_Port_GetLineCoding+0x14>)
}
 8000e9a:	4770      	bx	lr
 8000e9c:	200001dc 	.word	0x200001dc
 8000ea0:	200000dc 	.word	0x200000dc

08000ea4 <Virtual_Com_Port_SetLineCoding>:
 8000ea4:	f7ff bff2 	b.w	8000e8c <Virtual_Com_Port_GetLineCoding>

08000ea8 <Virtual_Com_Port_init>:
{
 8000ea8:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 8000eaa:	2400      	movs	r4, #0
  Get_SerialNum();
 8000eac:	f7ff fe78 	bl	8000ba0 <Get_SerialNum>
  pInformation->Current_Configuration = 0;
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <Virtual_Com_Port_init+0x1c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	729c      	strb	r4, [r3, #10]
  PowerOn();
 8000eb6:	f000 f8a7 	bl	8001008 <PowerOn>
  USB_SIL_Init();
 8000eba:	f000 ffd7 	bl	8001e6c <USB_SIL_Init>
  bDeviceState = UNCONNECTED;
 8000ebe:	4b02      	ldr	r3, [pc, #8]	; (8000ec8 <Virtual_Com_Port_init+0x20>)
 8000ec0:	601c      	str	r4, [r3, #0]
}
 8000ec2:	bd10      	pop	{r4, pc}
 8000ec4:	200001dc 	.word	0x200001dc
 8000ec8:	200001b0 	.word	0x200001b0

08000ecc <Virtual_Com_Port_Reset>:
{
 8000ecc:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 8000ece:	2400      	movs	r4, #0
 8000ed0:	4b32      	ldr	r3, [pc, #200]	; (8000f9c <Virtual_Com_Port_Reset+0xd0>)
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000ed2:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <Virtual_Com_Port_Reset+0xd4>)
  pInformation->Current_Configuration = 0;
 8000ed4:	681b      	ldr	r3, [r3, #0]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000ed6:	79d2      	ldrb	r2, [r2, #7]
  pInformation->Current_Configuration = 0;
 8000ed8:	815c      	strh	r4, [r3, #10]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000eda:	725a      	strb	r2, [r3, #9]
  SetBTABLE(BTABLE_ADDRESS);
 8000edc:	4620      	mov	r0, r4
 8000ede:	f000 fe91 	bl	8001c04 <SetBTABLE>
  SetEPType(ENDP0, EP_CONTROL);
 8000ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	f000 fe96 	bl	8001c18 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8000eec:	2110      	movs	r1, #16
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f000 fea0 	bl	8001c34 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000ef4:	2140      	movs	r1, #64	; 0x40
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f000 ff3e 	bl	8001d78 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	4620      	mov	r0, r4
 8000f00:	f000 ff28 	bl	8001d54 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 8000f04:	4620      	mov	r0, r4
 8000f06:	f000 fefd 	bl	8001d04 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <Virtual_Com_Port_Reset+0xd8>)
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8000f12:	f000 ff73 	bl	8001dfc <SetEPRxCount>
  SetEPRxValid(ENDP0);
 8000f16:	4620      	mov	r0, r4
 8000f18:	f000 fed1 	bl	8001cbe <SetEPRxValid>
  SetEPType(ENDP1, EP_BULK);
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f000 fe7a 	bl	8001c18 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8000f24:	21c0      	movs	r1, #192	; 0xc0
 8000f26:	2001      	movs	r0, #1
 8000f28:	f000 ff14 	bl	8001d54 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f000 fe80 	bl	8001c34 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8000f34:	4621      	mov	r1, r4
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 fe95 	bl	8001c66 <SetEPRxStatus>
  SetEPType(ENDP2, EP_INTERRUPT);
 8000f3c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000f40:	2002      	movs	r0, #2
 8000f42:	f000 fe69 	bl	8001c18 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8000f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f000 ff02 	bl	8001d54 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8000f50:	4621      	mov	r1, r4
 8000f52:	2002      	movs	r0, #2
 8000f54:	f000 fe87 	bl	8001c66 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8000f58:	2120      	movs	r1, #32
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f000 fe6a 	bl	8001c34 <SetEPTxStatus>
  SetEPType(ENDP3, EP_BULK);
 8000f60:	4621      	mov	r1, r4
 8000f62:	2003      	movs	r0, #3
 8000f64:	f000 fe58 	bl	8001c18 <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8000f68:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 ff03 	bl	8001d78 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8000f72:	2140      	movs	r1, #64	; 0x40
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 ff41 	bl	8001dfc <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8000f7a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f7e:	2003      	movs	r0, #3
 8000f80:	f000 fe71 	bl	8001c66 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8000f84:	4621      	mov	r1, r4
 8000f86:	2003      	movs	r0, #3
 8000f88:	f000 fe54 	bl	8001c34 <SetEPTxStatus>
  SetDeviceAddress(0);
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f000 fce7 	bl	8001960 <SetDeviceAddress>
  bDeviceState = ATTACHED;
 8000f92:	2201      	movs	r2, #1
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <Virtual_Com_Port_Reset+0xdc>)
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200001dc 	.word	0x200001dc
 8000fa0:	08001fe6 	.word	0x08001fe6
 8000fa4:	20000064 	.word	0x20000064
 8000fa8:	200001b0 	.word	0x200001b0

08000fac <Virtual_Com_Port_GetDeviceDescriptor>:
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8000fac:	4901      	ldr	r1, [pc, #4]	; (8000fb4 <Virtual_Com_Port_GetDeviceDescriptor+0x8>)
 8000fae:	f000 badd 	b.w	800156c <Standard_GetDescriptorData>
 8000fb2:	bf00      	nop
 8000fb4:	2000005c 	.word	0x2000005c

08000fb8 <Virtual_Com_Port_GetConfigDescriptor>:
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8000fb8:	4901      	ldr	r1, [pc, #4]	; (8000fc0 <Virtual_Com_Port_GetConfigDescriptor+0x8>)
 8000fba:	f000 bad7 	b.w	800156c <Standard_GetDescriptorData>
 8000fbe:	bf00      	nop
 8000fc0:	20000054 	.word	0x20000054

08000fc4 <Virtual_Com_Port_GetStringDescriptor>:
  uint8_t wValue0 = pInformation->USBwValue0;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <Virtual_Com_Port_GetStringDescriptor+0x18>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d804      	bhi.n	8000fd8 <Virtual_Com_Port_GetStringDescriptor+0x14>
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8000fce:	4904      	ldr	r1, [pc, #16]	; (8000fe0 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8000fd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8000fd4:	f000 baca 	b.w	800156c <Standard_GetDescriptorData>
}
 8000fd8:	2000      	movs	r0, #0
 8000fda:	4770      	bx	lr
 8000fdc:	200001dc 	.word	0x200001dc
 8000fe0:	20000098 	.word	0x20000098

08000fe4 <Virtual_Com_Port_NoData_Setup>:
  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <Virtual_Com_Port_NoData_Setup+0x20>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fee:	2b21      	cmp	r3, #33	; 0x21
 8000ff0:	d106      	bne.n	8001000 <Virtual_Com_Port_NoData_Setup+0x1c>
    if (RequestNo == SET_COMM_FEATURE)
 8000ff2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
      return USB_SUCCESS;
 8000ff6:	2802      	cmp	r0, #2
 8000ff8:	bf14      	ite	ne
 8000ffa:	2002      	movne	r0, #2
 8000ffc:	2000      	moveq	r0, #0
 8000ffe:	4770      	bx	lr
  return USB_UNSUPPORT;
 8001000:	2002      	movs	r0, #2
}
 8001002:	4770      	bx	lr
 8001004:	200001dc 	.word	0x200001dc

08001008 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8001008:	b508      	push	{r3, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff fd84 	bl	8000b18 <USB_Cable_Config>

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001010:	2201      	movs	r2, #1
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <PowerOn+0x28>)

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8001014:	2000      	movs	r0, #0
  _SetCNTR(wRegVal);
 8001016:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800101a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800101e:	4905      	ldr	r1, [pc, #20]	; (8001034 <PowerOn+0x2c>)
  _SetCNTR(wInterrupt_Mask);
 8001020:	f8c3 0c40 	str.w	r0, [r3, #3136]	; 0xc40
  _SetISTR(0);
 8001024:	f8c3 0c44 	str.w	r0, [r3, #3140]	; 0xc44
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001028:	800a      	strh	r2, [r1, #0]
  _SetCNTR(wInterrupt_Mask);
 800102a:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40

  return USB_SUCCESS;
}
 800102e:	bd08      	pop	{r3, pc}
 8001030:	40005000 	.word	0x40005000
 8001034:	200001e8 	.word	0x200001e8

08001038 <Suspend>:
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8001038:	2200      	movs	r2, #0
{
 800103a:	b513      	push	{r0, r1, r4, lr}
	/* suspend preparation */
	/* ... */

	/*Store CNTR value */
	wCNTR = _GetCNTR();
 800103c:	4b34      	ldr	r3, [pc, #208]	; (8001110 <Suspend+0xd8>)
  __IO uint32_t savePWR_CR=0;
 800103e:	9201      	str	r2, [sp, #4]
	wCNTR = _GetCNTR();
 8001040:	f8d3 3c40 	ldr.w	r3, [r3, #3136]	; 0xc40

    /* This a sequence to apply a force RESET to handle a robustness case */

	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8001044:	4c33      	ldr	r4, [pc, #204]	; (8001114 <Suspend+0xdc>)
	wCNTR = _GetCNTR();
 8001046:	b29b      	uxth	r3, r3
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8001048:	0091      	lsls	r1, r2, #2
 800104a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800104e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001052:	6809      	ldr	r1, [r1, #0]
 8001054:	b289      	uxth	r1, r1
 8001056:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800105a:	3201      	adds	r2, #1
 800105c:	2a08      	cmp	r2, #8
 800105e:	d1f3      	bne.n	8001048 <Suspend+0x10>

	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001060:	4a2b      	ldr	r2, [pc, #172]	; (8001110 <Suspend+0xd8>)
 8001062:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001066:	f8c2 1c40 	str.w	r1, [r2, #3136]	; 0xc40

	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	f041 0101 	orr.w	r1, r1, #1
 8001072:	f8c2 1c40 	str.w	r1, [r2, #3136]	; 0xc40

	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8001076:	b299      	uxth	r1, r3
	_SetCNTR(wCNTR);
 8001078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107c:	f8c2 3c40 	str.w	r3, [r2, #3136]	; 0xc40

	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8001080:	f8d2 3c44 	ldr.w	r3, [r2, #3140]	; 0xc44
 8001084:	055b      	lsls	r3, r3, #21
 8001086:	d5fb      	bpl.n	8001080 <Suspend+0x48>

	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8001088:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 800108c:	f8c2 3c44 	str.w	r3, [r2, #3140]	; 0xc44

	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8001090:	2300      	movs	r3, #0
	_SetENDPOINT(i, EP[i]);
 8001092:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8001096:	009a      	lsls	r2, r3, #2
 8001098:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
	for (i=0;i<8;i++)
 800109c:	3301      	adds	r3, #1
 800109e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80010a2:	b280      	uxth	r0, r0
 80010a4:	2b08      	cmp	r3, #8
	_SetENDPOINT(i, EP[i]);
 80010a6:	6010      	str	r0, [r2, #0]
	for (i=0;i<8;i++)
 80010a8:	d1f3      	bne.n	8001092 <Suspend+0x5a>

	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <Suspend+0xd8>)
 80010ac:	f441 6181 	orr.w	r1, r1, #1032	; 0x408
 80010b0:	f8c3 1c40 	str.w	r1, [r3, #3136]	; 0xc40

	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 80010b4:	f8d3 2c40 	ldr.w	r2, [r3, #3136]	; 0xc40
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);

	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = PWR->CR;
 80010b8:	4917      	ldr	r1, [pc, #92]	; (8001118 <Suspend+0xe0>)
	wCNTR = _GetCNTR();
 80010ba:	b292      	uxth	r2, r2
	_SetCNTR(wCNTR);
 80010bc:	f042 0204 	orr.w	r2, r2, #4
 80010c0:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
	savePWR_CR = PWR->CR;
 80010c4:	680a      	ldr	r2, [r1, #0]
 80010c6:	9201      	str	r2, [sp, #4]
	tmpreg = PWR->CR;
 80010c8:	680a      	ldr	r2, [r1, #0]
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 80010ca:	f022 0203 	bic.w	r2, r2, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 80010ce:	f042 0201 	orr.w	r2, r2, #1
	/* Store the new value */
	PWR->CR = tmpreg;
 80010d2:	600a      	str	r2, [r1, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
        SCB->SCR |= SCB_SCR_SLEEPDEEP;
 80010d4:	4a11      	ldr	r2, [pc, #68]	; (800111c <Suspend+0xe4>)
 80010d6:	6910      	ldr	r0, [r2, #16]
 80010d8:	f040 0004 	orr.w	r0, r0, #4
 80010dc:	6110      	str	r0, [r2, #16]

	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 80010de:	f8d3 0c44 	ldr.w	r0, [r3, #3140]	; 0xc44
 80010e2:	04c0      	lsls	r0, r0, #19
 80010e4:	d406      	bmi.n	80010f4 <Suspend+0xbc>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80010e6:	bf30      	wfi
		/*restore sleep mode configuration */
		/* restore Power regulator config in sleep mode*/
		PWR->CR = savePWR_CR;

		/* Reset SLEEPDEEP bit of Cortex System Control Register */
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 80010e8:	6913      	ldr	r3, [r2, #16]
 80010ea:	f023 0304 	bic.w	r3, r3, #4
 80010ee:	6113      	str	r3, [r2, #16]
    }
}
 80010f0:	b002      	add	sp, #8
 80010f2:	bd10      	pop	{r4, pc}
		_SetISTR(CLR_WKUP);
 80010f4:	f64e 70ff 	movw	r0, #61439	; 0xefff
 80010f8:	f8c3 0c44 	str.w	r0, [r3, #3140]	; 0xc44
        _SetCNTR(wCNTR);
 80010fc:	f64f 70f7 	movw	r0, #65527	; 0xfff7
        wCNTR = _GetCNTR();
 8001100:	f8d3 4c40 	ldr.w	r4, [r3, #3136]	; 0xc40
        _SetCNTR(wCNTR);
 8001104:	4020      	ands	r0, r4
 8001106:	f8c3 0c40 	str.w	r0, [r3, #3136]	; 0xc40
		PWR->CR = savePWR_CR;
 800110a:	9b01      	ldr	r3, [sp, #4]
 800110c:	600b      	str	r3, [r1, #0]
 800110e:	e7eb      	b.n	80010e8 <Suspend+0xb0>
 8001110:	40005000 	.word	0x40005000
 8001114:	2000018c 	.word	0x2000018c
 8001118:	40007000 	.word	0x40007000
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Resume_Init>:
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);
 8001120:	f64f 73fb 	movw	r3, #65531	; 0xfffb
{
 8001124:	b510      	push	{r4, lr}
  wCNTR = _GetCNTR();
 8001126:	4c06      	ldr	r4, [pc, #24]	; (8001140 <Resume_Init+0x20>)
 8001128:	f8d4 2c40 	ldr.w	r2, [r4, #3136]	; 0xc40
  _SetCNTR(wCNTR);
 800112c:	4013      	ands	r3, r2
 800112e:	f8c4 3c40 	str.w	r3, [r4, #3136]	; 0xc40

  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8001132:	f7ff fcc5 	bl	8000ac0 <Leave_LowPowerMode>

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8001136:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800113a:	f8c4 3c40 	str.w	r3, [r4, #3136]	; 0xc40

  /* reverse suspend preparation */
  /* ... */

}
 800113e:	bd10      	pop	{r4, pc}
 8001140:	40005000 	.word	0x40005000

08001144 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8001144:	b510      	push	{r4, lr}
 8001146:	4c27      	ldr	r4, [pc, #156]	; (80011e4 <Resume+0xa0>)
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8001148:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 800114a:	bf18      	it	ne
 800114c:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 800114e:	7823      	ldrb	r3, [r4, #0]
 8001150:	2b05      	cmp	r3, #5
 8001152:	d809      	bhi.n	8001168 <Resume+0x24>
 8001154:	e8df f003 	tbb	[pc, r3]
 8001158:	19150d03 	.word	0x19150d03
 800115c:	2f22      	.short	0x2f22
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <Resume+0xa4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	b91b      	cbnz	r3, 800116c <Resume+0x28>
      {
        Resume_Init();
 8001164:	f7ff ffdc 	bl	8001120 <Resume_Init>
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8001168:	2306      	movs	r3, #6
 800116a:	e000      	b.n	800116e <Resume+0x2a>
        ResumeS.eState = RESUME_ON;
 800116c:	2305      	movs	r3, #5
      ResumeS.eState = RESUME_OFF;
 800116e:	7023      	strb	r3, [r4, #0]
      break;
  }
}
 8001170:	e006      	b.n	8001180 <Resume+0x3c>
      Resume_Init();
 8001172:	f7ff ffd5 	bl	8001120 <Resume_Init>
      ResumeS.eState = RESUME_START;
 8001176:	2304      	movs	r3, #4
      remotewakeupon = 1;
 8001178:	2201      	movs	r2, #1
      ResumeS.eState = RESUME_START;
 800117a:	7023      	strb	r3, [r4, #0]
      remotewakeupon = 1;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <Resume+0xa4>)
 800117e:	601a      	str	r2, [r3, #0]
}
 8001180:	bd10      	pop	{r4, pc}
      ResumeS.bESOFcnt = 2;
 8001182:	2302      	movs	r3, #2
 8001184:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8001186:	2303      	movs	r3, #3
 8001188:	e7f1      	b.n	800116e <Resume+0x2a>
      ResumeS.bESOFcnt--;
 800118a:	7863      	ldrb	r3, [r4, #1]
 800118c:	3b01      	subs	r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8001192:	7863      	ldrb	r3, [r4, #1]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f3      	bne.n	8001180 <Resume+0x3c>
        ResumeS.eState = RESUME_START;
 8001198:	2304      	movs	r3, #4
 800119a:	e7e8      	b.n	800116e <Resume+0x2a>
      wCNTR = _GetCNTR();
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <Resume+0xa8>)
 800119e:	f8d2 3c40 	ldr.w	r3, [r2, #3136]	; 0xc40
 80011a2:	b29b      	uxth	r3, r3
      _SetCNTR(wCNTR);
 80011a4:	f043 0310 	orr.w	r3, r3, #16
 80011a8:	f8c2 3c40 	str.w	r3, [r2, #3136]	; 0xc40
      ResumeS.eState = RESUME_ON;
 80011ac:	2305      	movs	r3, #5
 80011ae:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 80011b0:	230a      	movs	r3, #10
 80011b2:	7063      	strb	r3, [r4, #1]
      break;
 80011b4:	e7e4      	b.n	8001180 <Resume+0x3c>
      ResumeS.bESOFcnt--;
 80011b6:	7863      	ldrb	r3, [r4, #1]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 80011be:	7863      	ldrb	r3, [r4, #1]
 80011c0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1db      	bne.n	8001180 <Resume+0x3c>
        _SetCNTR(wCNTR);
 80011c8:	f64f 73ef 	movw	r3, #65519	; 0xffef
        wCNTR = _GetCNTR();
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <Resume+0xa8>)
 80011ce:	f8d2 0c40 	ldr.w	r0, [r2, #3136]	; 0xc40
        _SetCNTR(wCNTR);
 80011d2:	4003      	ands	r3, r0
 80011d4:	f8c2 3c40 	str.w	r3, [r2, #3136]	; 0xc40
        ResumeS.eState = RESUME_OFF;
 80011d8:	2306      	movs	r3, #6
 80011da:	7023      	strb	r3, [r4, #0]
        remotewakeupon = 0;
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <Resume+0xa4>)
 80011de:	6019      	str	r1, [r3, #0]
 80011e0:	e7ce      	b.n	8001180 <Resume+0x3c>
 80011e2:	bf00      	nop
 80011e4:	200001ac 	.word	0x200001ac
 80011e8:	200001b4 	.word	0x200001b4
 80011ec:	40005000 	.word	0x40005000

080011f0 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 80011f0:	b510      	push	{r4, lr}
 80011f2:	4c06      	ldr	r4, [pc, #24]	; (800120c <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 80011f4:	b918      	cbnz	r0, 80011fe <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80011f6:	2201      	movs	r2, #1
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
  return (uint8_t *)&pInformation->Current_Configuration;
}
 80011fc:	bd10      	pop	{r4, pc}
  pUser_Standard_Requests->User_GetConfiguration();
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <Standard_GetConfiguration+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8001206:	6820      	ldr	r0, [r4, #0]
 8001208:	300a      	adds	r0, #10
 800120a:	e7f7      	b.n	80011fc <Standard_GetConfiguration+0xc>
 800120c:	200001dc 	.word	0x200001dc
 8001210:	200001e4 	.word	0x200001e4

08001214 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8001214:	b510      	push	{r4, lr}
 8001216:	4c06      	ldr	r4, [pc, #24]	; (8001230 <Standard_GetInterface+0x1c>)
  if (Length == 0)
 8001218:	b918      	cbnz	r0, 8001222 <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800121a:	2201      	movs	r2, #1
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
  return (uint8_t *)&pInformation->Current_AlternateSetting;
}
 8001220:	bd10      	pop	{r4, pc}
  pUser_Standard_Requests->User_GetInterface();
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <Standard_GetInterface+0x20>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 800122a:	6820      	ldr	r0, [r4, #0]
 800122c:	300c      	adds	r0, #12
 800122e:	e7f7      	b.n	8001220 <Standard_GetInterface+0xc>
 8001230:	200001dc 	.word	0x200001dc
 8001234:	200001e4 	.word	0x200001e4

08001238 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8001238:	b508      	push	{r3, lr}
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <Standard_GetStatus+0x80>)
 800123c:	6819      	ldr	r1, [r3, #0]
  if (Length == 0)
 800123e:	4603      	mov	r3, r0
 8001240:	2000      	movs	r0, #0
 8001242:	b91b      	cbnz	r3, 800124c <Standard_GetStatus+0x14>
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8001244:	2202      	movs	r2, #2
    return 0;
 8001246:	4618      	mov	r0, r3
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8001248:	820a      	strh	r2, [r1, #16]
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 800124a:	bd08      	pop	{r3, pc}
  StatusInfo.w = 0;
 800124c:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <Standard_GetStatus+0x84>)
 800124e:	8010      	strh	r0, [r2, #0]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001250:	780b      	ldrb	r3, [r1, #0]
 8001252:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8001256:	d112      	bne.n	800127e <Standard_GetStatus+0x46>
    uint8_t Feature = pInformation->Current_Feature;
 8001258:	7a49      	ldrb	r1, [r1, #9]
    if (ValBit(Feature, 5))
 800125a:	068b      	lsls	r3, r1, #26
      SetBit(StatusInfo0, 1);
 800125c:	bf44      	itt	mi
 800125e:	2302      	movmi	r3, #2
 8001260:	7013      	strbmi	r3, [r2, #0]
      SetBit(StatusInfo0, 0);
 8001262:	7813      	ldrb	r3, [r2, #0]
    if (ValBit(Feature, 6))
 8001264:	0648      	lsls	r0, r1, #25
      SetBit(StatusInfo0, 0);
 8001266:	bf4c      	ite	mi
 8001268:	f043 0301 	orrmi.w	r3, r3, #1
      ClrBit(StatusInfo0, 0);
 800126c:	f023 0301 	bicpl.w	r3, r3, #1
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8001270:	7013      	strb	r3, [r2, #0]
  pUser_Standard_Requests->User_GetStatus();
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <Standard_GetStatus+0x88>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 800127a:	4810      	ldr	r0, [pc, #64]	; (80012bc <Standard_GetStatus+0x84>)
 800127c:	e7e5      	b.n	800124a <Standard_GetStatus+0x12>
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800127e:	2b01      	cmp	r3, #1
 8001280:	d017      	beq.n	80012b2 <Standard_GetStatus+0x7a>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001282:	2b02      	cmp	r3, #2
 8001284:	d1e1      	bne.n	800124a <Standard_GetStatus+0x12>
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8001286:	7949      	ldrb	r1, [r1, #5]
      if (_GetTxStallStatus(Related_Endpoint))
 8001288:	f001 030f 	and.w	r3, r1, #15
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001292:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    if (ValBit(wIndex0, 7))
 8001296:	0609      	lsls	r1, r1, #24
      if (_GetTxStallStatus(Related_Endpoint))
 8001298:	681b      	ldr	r3, [r3, #0]
    if (ValBit(wIndex0, 7))
 800129a:	d505      	bpl.n	80012a8 <Standard_GetStatus+0x70>
      if (_GetTxStallStatus(Related_Endpoint))
 800129c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012a0:	2b10      	cmp	r3, #16
 80012a2:	d1e6      	bne.n	8001272 <Standard_GetStatus+0x3a>
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 80012a4:	2301      	movs	r3, #1
 80012a6:	e7e3      	b.n	8001270 <Standard_GetStatus+0x38>
      if (_GetRxStallStatus(Related_Endpoint))
 80012a8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80012ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012b0:	e7f7      	b.n	80012a2 <Standard_GetStatus+0x6a>
    return (uint8_t *)&StatusInfo;
 80012b2:	4610      	mov	r0, r2
 80012b4:	e7c9      	b.n	800124a <Standard_GetStatus+0x12>
 80012b6:	bf00      	nop
 80012b8:	200001dc 	.word	0x200001dc
 80012bc:	200001ba 	.word	0x200001ba
 80012c0:	200001e4 	.word	0x200001e4

080012c4 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80012c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80012c8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001358 <DataStageIn+0x94>
 80012cc:	4f23      	ldr	r7, [pc, #140]	; (800135c <DataStageIn+0x98>)
 80012ce:	f8d8 5000 	ldr.w	r5, [r8]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 80012d2:	8a2c      	ldrh	r4, [r5, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80012d4:	b9d4      	cbnz	r4, 800130c <DataStageIn+0x48>
 80012d6:	7a2e      	ldrb	r6, [r5, #8]
 80012d8:	2e04      	cmp	r6, #4
 80012da:	d117      	bne.n	800130c <DataStageIn+0x48>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 80012dc:	4920      	ldr	r1, [pc, #128]	; (8001360 <DataStageIn+0x9c>)
 80012de:	780b      	ldrb	r3, [r1, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d10f      	bne.n	8001304 <DataStageIn+0x40>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <DataStageIn+0xa0>)
 80012e6:	f8d3 2c50 	ldr.w	r2, [r3, #3152]	; 0xc50
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <DataStageIn+0xa4>)
 80012ec:	b292      	uxth	r2, r2
 80012ee:	4413      	add	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	601c      	str	r4, [r3, #0]
 80012f4:	2330      	movs	r3, #48	; 0x30
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80012f6:	700c      	strb	r4, [r1, #0]
      Send0LengthData();
 80012f8:	803b      	strh	r3, [r7, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80012fa:	f8d8 3000 	ldr.w	r3, [r8]
 80012fe:	721e      	strb	r6, [r3, #8]
}
 8001300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      vSetEPTxStatus(EP_TX_STALL);
 8001304:	2310      	movs	r3, #16
      ControlState = WAIT_STATUS_OUT;
 8001306:	2607      	movs	r6, #7
      vSetEPTxStatus(EP_TX_STALL);
 8001308:	803b      	strh	r3, [r7, #0]
 800130a:	e7f6      	b.n	80012fa <DataStageIn+0x36>
  Length = pEPinfo->PacketSize;
 800130c:	8aaa      	ldrh	r2, [r5, #20]
  DataBuffer = (*pEPinfo->CopyData)(Length);
 800130e:	69ab      	ldr	r3, [r5, #24]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8001310:	4294      	cmp	r4, r2
 8001312:	bf94      	ite	ls
 8001314:	2604      	movls	r6, #4
 8001316:	2602      	movhi	r6, #2
  DataBuffer = (*pEPinfo->CopyData)(Length);
 8001318:	4294      	cmp	r4, r2
 800131a:	bf28      	it	cs
 800131c:	4614      	movcs	r4, r2
 800131e:	4620      	mov	r0, r4
 8001320:	4798      	blx	r3
 8001322:	4681      	mov	r9, r0
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8001324:	2000      	movs	r0, #0
 8001326:	f000 fd39 	bl	8001d9c <GetEPTxAddr>
 800132a:	4622      	mov	r2, r4
 800132c:	4601      	mov	r1, r0
 800132e:	4648      	mov	r0, r9
 8001330:	f000 fc4a 	bl	8001bc8 <UserToPMABufferCopy>
  SetEPTxCount(ENDP0, Length);
 8001334:	4621      	mov	r1, r4
 8001336:	2000      	movs	r0, #0
 8001338:	f000 fd50 	bl	8001ddc <SetEPTxCount>
  pEPinfo->Usb_wLength -= Length;
 800133c:	8a2b      	ldrh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 800133e:	8a6a      	ldrh	r2, [r5, #18]
  pEPinfo->Usb_wLength -= Length;
 8001340:	1b1b      	subs	r3, r3, r4
 8001342:	822b      	strh	r3, [r5, #16]
  vSetEPTxStatus(EP_TX_VALID);
 8001344:	2330      	movs	r3, #48	; 0x30
  pEPinfo->Usb_wOffset += Length;
 8001346:	4414      	add	r4, r2
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001348:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  vSetEPTxStatus(EP_TX_VALID);
 800134c:	803b      	strh	r3, [r7, #0]
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <DataStageIn+0xa8>)
  pEPinfo->Usb_wOffset += Length;
 8001350:	826c      	strh	r4, [r5, #18]
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001352:	801a      	strh	r2, [r3, #0]
 8001354:	e7d1      	b.n	80012fa <DataStageIn+0x36>
 8001356:	bf00      	nop
 8001358:	200001dc 	.word	0x200001dc
 800135c:	200001ec 	.word	0x200001ec
 8001360:	200001b8 	.word	0x200001b8
 8001364:	40005000 	.word	0x40005000
 8001368:	20003002 	.word	0x20003002
 800136c:	200001ea 	.word	0x200001ea

08001370 <Standard_SetConfiguration>:
{
 8001370:	b510      	push	{r4, lr}
  if ((pInformation->USBwValue0 <=
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001374:	490a      	ldr	r1, [pc, #40]	; (80013a0 <Standard_SetConfiguration+0x30>)
  if ((pInformation->USBwValue0 <=
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	7849      	ldrb	r1, [r1, #1]
 800137a:	78da      	ldrb	r2, [r3, #3]
 800137c:	4291      	cmp	r1, r2
 800137e:	d30a      	bcc.n	8001396 <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001380:	789c      	ldrb	r4, [r3, #2]
 8001382:	b944      	cbnz	r4, 8001396 <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001384:	8899      	ldrh	r1, [r3, #4]
 8001386:	b931      	cbnz	r1, 8001396 <Standard_SetConfiguration+0x26>
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8001388:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <Standard_SetConfiguration+0x34>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	4798      	blx	r3
}
 8001392:	4620      	mov	r0, r4
 8001394:	bd10      	pop	{r4, pc}
    return USB_UNSUPPORT;
 8001396:	2402      	movs	r4, #2
 8001398:	e7fb      	b.n	8001392 <Standard_SetConfiguration+0x22>
 800139a:	bf00      	nop
 800139c:	200001dc 	.word	0x200001dc
 80013a0:	20000094 	.word	0x20000094
 80013a4:	200001e4 	.word	0x200001e4

080013a8 <Standard_SetInterface>:
{
 80013a8:	b538      	push	{r3, r4, r5, lr}
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 80013aa:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <Standard_SetInterface+0x3c>)
 80013ac:	4d0e      	ldr	r5, [pc, #56]	; (80013e8 <Standard_SetInterface+0x40>)
 80013ae:	6812      	ldr	r2, [r2, #0]
 80013b0:	682b      	ldr	r3, [r5, #0]
 80013b2:	6992      	ldr	r2, [r2, #24]
 80013b4:	78d9      	ldrb	r1, [r3, #3]
 80013b6:	7958      	ldrb	r0, [r3, #5]
 80013b8:	4790      	blx	r2
  if (pInformation->Current_Configuration != 0)
 80013ba:	682b      	ldr	r3, [r5, #0]
 80013bc:	7a9a      	ldrb	r2, [r3, #10]
 80013be:	b17a      	cbz	r2, 80013e0 <Standard_SetInterface+0x38>
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80013c0:	b970      	cbnz	r0, 80013e0 <Standard_SetInterface+0x38>
 80013c2:	791a      	ldrb	r2, [r3, #4]
 80013c4:	b962      	cbnz	r2, 80013e0 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 80013c6:	789c      	ldrb	r4, [r3, #2]
 80013c8:	b954      	cbnz	r4, 80013e0 <Standard_SetInterface+0x38>
      pUser_Standard_Requests->User_SetInterface();
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <Standard_SetInterface+0x44>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80013d2:	682b      	ldr	r3, [r5, #0]
 80013d4:	795a      	ldrb	r2, [r3, #5]
 80013d6:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80013d8:	78da      	ldrb	r2, [r3, #3]
 80013da:	731a      	strb	r2, [r3, #12]
}
 80013dc:	4620      	mov	r0, r4
 80013de:	bd38      	pop	{r3, r4, r5, pc}
  return USB_UNSUPPORT;
 80013e0:	2402      	movs	r4, #2
 80013e2:	e7fb      	b.n	80013dc <Standard_SetInterface+0x34>
 80013e4:	200001e0 	.word	0x200001e0
 80013e8:	200001dc 	.word	0x200001dc
 80013ec:	200001e4 	.word	0x200001e4

080013f0 <Standard_ClearFeature>:
{
 80013f0:	b570      	push	{r4, r5, r6, lr}
  uint32_t     Type_Rec = Type_Recipient;
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <Standard_ClearFeature+0xc0>)
 80013f4:	681d      	ldr	r5, [r3, #0]
 80013f6:	782b      	ldrb	r3, [r5, #0]
  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80013f8:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 80013fc:	d105      	bne.n	800140a <Standard_ClearFeature+0x1a>
    ClrBit(pInformation->Current_Feature, 5);
 80013fe:	7a6a      	ldrb	r2, [r5, #9]
 8001400:	f022 0220 	bic.w	r2, r2, #32
 8001404:	726a      	strb	r2, [r5, #9]
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd70      	pop	{r4, r5, r6, pc}
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800140a:	2b02      	cmp	r3, #2
 800140c:	d14d      	bne.n	80014aa <Standard_ClearFeature+0xba>
    if ((pInformation->USBwValue != ENDPOINT_STALL)
 800140e:	886a      	ldrh	r2, [r5, #2]
 8001410:	2a00      	cmp	r2, #0
 8001412:	d1f8      	bne.n	8001406 <Standard_ClearFeature+0x16>
        || (pInformation->USBwIndex1 != 0))
 8001414:	792a      	ldrb	r2, [r5, #4]
 8001416:	2a00      	cmp	r2, #0
 8001418:	d1f5      	bne.n	8001406 <Standard_ClearFeature+0x16>
    wIndex0 = pInformation->USBwIndex0;
 800141a:	7969      	ldrb	r1, [r5, #5]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800141c:	4e25      	ldr	r6, [pc, #148]	; (80014b4 <Standard_ClearFeature+0xc4>)
    rEP = wIndex0 & ~0x80;
 800141e:	f021 0080 	bic.w	r0, r1, #128	; 0x80
      Status = _GetEPTxStatus(Related_Endpoint);
 8001422:	0084      	lsls	r4, r0, #2
 8001424:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001428:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 800142c:	6822      	ldr	r2, [r4, #0]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800142e:	7836      	ldrb	r6, [r6, #0]
    if (ValBit(pInformation->USBwIndex0, 7))
 8001430:	b249      	sxtb	r1, r1
 8001432:	2900      	cmp	r1, #0
      Status = _GetEPTxStatus(Related_Endpoint);
 8001434:	bfb4      	ite	lt
 8001436:	f002 0230 	andlt.w	r2, r2, #48	; 0x30
      Status = _GetEPRxStatus(Related_Endpoint);
 800143a:	f402 5240 	andge.w	r2, r2, #12288	; 0x3000
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800143e:	4286      	cmp	r6, r0
 8001440:	d9e1      	bls.n	8001406 <Standard_ClearFeature+0x16>
 8001442:	2a00      	cmp	r2, #0
 8001444:	d0df      	beq.n	8001406 <Standard_ClearFeature+0x16>
        || (pInformation->Current_Configuration == 0))
 8001446:	7aaa      	ldrb	r2, [r5, #10]
 8001448:	2a00      	cmp	r2, #0
 800144a:	d0dc      	beq.n	8001406 <Standard_ClearFeature+0x16>
    if (wIndex0 & 0x80)
 800144c:	2900      	cmp	r1, #0
      if (_GetTxStallStatus(Related_Endpoint ))
 800144e:	6823      	ldr	r3, [r4, #0]
    if (wIndex0 & 0x80)
 8001450:	da11      	bge.n	8001476 <Standard_ClearFeature+0x86>
      if (_GetTxStallStatus(Related_Endpoint ))
 8001452:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001456:	2b10      	cmp	r3, #16
 8001458:	d107      	bne.n	800146a <Standard_ClearFeature+0x7a>
        ClearDTOG_TX(Related_Endpoint);
 800145a:	b2c4      	uxtb	r4, r0
 800145c:	4620      	mov	r0, r4
 800145e:	f000 fc66 	bl	8001d2e <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8001462:	2130      	movs	r1, #48	; 0x30
 8001464:	4620      	mov	r0, r4
 8001466:	f000 fbe5 	bl	8001c34 <SetEPTxStatus>
    pUser_Standard_Requests->User_ClearFeature();
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <Standard_ClearFeature+0xc8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	4798      	blx	r3
    return USB_SUCCESS;
 8001472:	2300      	movs	r3, #0
 8001474:	e7c7      	b.n	8001406 <Standard_ClearFeature+0x16>
      if (_GetRxStallStatus(Related_Endpoint))
 8001476:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800147a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800147e:	d1f4      	bne.n	800146a <Standard_ClearFeature+0x7a>
        if (Related_Endpoint == ENDP0)
 8001480:	4d0e      	ldr	r5, [pc, #56]	; (80014bc <Standard_ClearFeature+0xcc>)
 8001482:	b978      	cbnz	r0, 80014a4 <Standard_ClearFeature+0xb4>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <Standard_ClearFeature+0xd0>)
 8001486:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800148a:	f000 fcb7 	bl	8001dfc <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	402b      	ands	r3, r5
 8001492:	b29b      	uxth	r3, r3
 8001494:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800149c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a0:	6023      	str	r3, [r4, #0]
 80014a2:	e7e2      	b.n	800146a <Standard_ClearFeature+0x7a>
          ClearDTOG_RX(Related_Endpoint);
 80014a4:	f000 fc30 	bl	8001d08 <ClearDTOG_RX>
 80014a8:	e7f1      	b.n	800148e <Standard_ClearFeature+0x9e>
  return USB_UNSUPPORT;
 80014aa:	2302      	movs	r3, #2
 80014ac:	e7ab      	b.n	8001406 <Standard_ClearFeature+0x16>
 80014ae:	bf00      	nop
 80014b0:	200001dc 	.word	0x200001dc
 80014b4:	20000094 	.word	0x20000094
 80014b8:	200001e4 	.word	0x200001e4
 80014bc:	ffffbf8f 	.word	0xffffbf8f
 80014c0:	20000064 	.word	0x20000064

080014c4 <Standard_SetEndPointFeature>:
{
 80014c4:	b538      	push	{r3, r4, r5, lr}
  wIndex0 = pInformation->USBwIndex0;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <Standard_SetEndPointFeature+0x78>)
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80014c8:	4d1d      	ldr	r5, [pc, #116]	; (8001540 <Standard_SetEndPointFeature+0x7c>)
  wIndex0 = pInformation->USBwIndex0;
 80014ca:	6818      	ldr	r0, [r3, #0]
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80014cc:	782d      	ldrb	r5, [r5, #0]
  wIndex0 = pInformation->USBwIndex0;
 80014ce:	7941      	ldrb	r1, [r0, #5]
  rEP = wIndex0 & ~0x80;
 80014d0:	f021 0480 	bic.w	r4, r1, #128	; 0x80
    Status = _GetEPTxStatus(Related_Endpoint);
 80014d4:	00a2      	lsls	r2, r4, #2
 80014d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80014da:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80014de:	6813      	ldr	r3, [r2, #0]
  if (ValBit(pInformation->USBwIndex0, 7))
 80014e0:	b249      	sxtb	r1, r1
 80014e2:	2900      	cmp	r1, #0
    Status = _GetEPTxStatus(Related_Endpoint);
 80014e4:	bfb4      	ite	lt
 80014e6:	f003 0330 	andlt.w	r3, r3, #48	; 0x30
    Status = _GetEPRxStatus(Related_Endpoint);
 80014ea:	f403 5340 	andge.w	r3, r3, #12288	; 0x3000
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80014ee:	42a5      	cmp	r5, r4
 80014f0:	d921      	bls.n	8001536 <Standard_SetEndPointFeature+0x72>
      || pInformation->USBwValue != 0 || Status == 0
 80014f2:	8844      	ldrh	r4, [r0, #2]
 80014f4:	b9fc      	cbnz	r4, 8001536 <Standard_SetEndPointFeature+0x72>
 80014f6:	b1f3      	cbz	r3, 8001536 <Standard_SetEndPointFeature+0x72>
      || pInformation->Current_Configuration == 0)
 80014f8:	7a83      	ldrb	r3, [r0, #10]
 80014fa:	b1e3      	cbz	r3, 8001536 <Standard_SetEndPointFeature+0x72>
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80014fc:	6813      	ldr	r3, [r2, #0]
    if (wIndex0 & 0x80)
 80014fe:	2900      	cmp	r1, #0
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001500:	bfb5      	itete	lt
 8001502:	f423 43e0 	biclt.w	r3, r3, #28672	; 0x7000
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001506:	f423 4380 	bicge.w	r3, r3, #16384	; 0x4000
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800150a:	f023 0340 	biclt.w	r3, r3, #64	; 0x40
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800150e:	f023 0370 	bicge.w	r3, r3, #112	; 0x70
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001512:	bfb5      	itete	lt
 8001514:	b29b      	uxthlt	r3, r3
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001516:	b29b      	uxthge	r3, r3
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001518:	f083 0310 	eorlt.w	r3, r3, #16
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800151c:	f483 5380 	eorge.w	r3, r3, #4096	; 0x1000
 8001520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001528:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests->User_SetEndPointFeature();
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <Standard_SetEndPointFeature+0x80>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4798      	blx	r3
  return USB_SUCCESS;
 8001532:	2000      	movs	r0, #0
}
 8001534:	bd38      	pop	{r3, r4, r5, pc}
    return USB_UNSUPPORT;
 8001536:	2002      	movs	r0, #2
 8001538:	e7fc      	b.n	8001534 <Standard_SetEndPointFeature+0x70>
 800153a:	bf00      	nop
 800153c:	200001dc 	.word	0x200001dc
 8001540:	20000094 	.word	0x20000094
 8001544:	200001e4 	.word	0x200001e4

08001548 <Standard_SetDeviceFeature>:
{
 8001548:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <Standard_SetDeviceFeature+0x1c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	7a53      	ldrb	r3, [r2, #9]
 8001550:	f043 0320 	orr.w	r3, r3, #32
 8001554:	7253      	strb	r3, [r2, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <Standard_SetDeviceFeature+0x20>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	4798      	blx	r3
}
 800155e:	2000      	movs	r0, #0
 8001560:	bd08      	pop	{r3, pc}
 8001562:	bf00      	nop
 8001564:	200001dc 	.word	0x200001dc
 8001568:	200001e4 	.word	0x200001e4

0800156c <Standard_GetDescriptorData>:
  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <Standard_GetDescriptorData+0x18>)
{
 800156e:	b510      	push	{r4, lr}
  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8001570:	681c      	ldr	r4, [r3, #0]
 8001572:	8a62      	ldrh	r2, [r4, #18]
  if (Length == 0)
 8001574:	b918      	cbnz	r0, 800157e <Standard_GetDescriptorData+0x12>
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8001576:	888b      	ldrh	r3, [r1, #4]
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	8223      	strh	r3, [r4, #16]
}
 800157c:	bd10      	pop	{r4, pc}
  return pDesc->Descriptor + wOffset;
 800157e:	6808      	ldr	r0, [r1, #0]
 8001580:	4410      	add	r0, r2
 8001582:	e7fb      	b.n	800157c <Standard_GetDescriptorData+0x10>
 8001584:	200001dc 	.word	0x200001dc

08001588 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8001588:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <Post0_Process+0x30>)
 800158c:	2000      	movs	r0, #0
 800158e:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001592:	f000 fc33 	bl	8001dfc <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <Post0_Process+0x34>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	7a18      	ldrb	r0, [r3, #8]
 800159c:	2808      	cmp	r0, #8
 800159e:	d106      	bne.n	80015ae <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 80015a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <Post0_Process+0x38>)
 80015a6:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 80015a8:	2210      	movs	r2, #16
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <Post0_Process+0x3c>)
 80015ac:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 80015ae:	f1a0 0309 	sub.w	r3, r0, #9
 80015b2:	4258      	negs	r0, r3
 80015b4:	4158      	adcs	r0, r3
 80015b6:	bd08      	pop	{r3, pc}
 80015b8:	20000064 	.word	0x20000064
 80015bc:	200001dc 	.word	0x200001dc
 80015c0:	200001ea 	.word	0x200001ea
 80015c4:	200001ec 	.word	0x200001ec

080015c8 <Setup0_Process>:
{
 80015c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (pInformation->ControlState != PAUSE)
 80015ca:	4c8f      	ldr	r4, [pc, #572]	; (8001808 <Setup0_Process+0x240>)
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80015cc:	4b8f      	ldr	r3, [pc, #572]	; (800180c <Setup0_Process+0x244>)
  if (pInformation->ControlState != PAUSE)
 80015ce:	6826      	ldr	r6, [r4, #0]
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80015d0:	f8d3 2c50 	ldr.w	r2, [r3, #3152]	; 0xc50
  if (pInformation->ControlState != PAUSE)
 80015d4:	7a33      	ldrb	r3, [r6, #8]
 80015d6:	2b09      	cmp	r3, #9
 80015d8:	d019      	beq.n	800160e <Setup0_Process+0x46>
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80015da:	4b8d      	ldr	r3, [pc, #564]	; (8001810 <Setup0_Process+0x248>)
 80015dc:	b292      	uxth	r2, r2
 80015de:	4413      	add	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	881d      	ldrh	r5, [r3, #0]
 80015e4:	006d      	lsls	r5, r5, #1
 80015e6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80015ea:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80015ee:	782b      	ldrb	r3, [r5, #0]
 80015f0:	7033      	strb	r3, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80015f2:	786b      	ldrb	r3, [r5, #1]
 80015f4:	7073      	strb	r3, [r6, #1]
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80015f6:	88a8      	ldrh	r0, [r5, #4]
 80015f8:	f000 fc34 	bl	8001e64 <ByteSwap>
 80015fc:	8070      	strh	r0, [r6, #2]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 80015fe:	8928      	ldrh	r0, [r5, #8]
 8001600:	6826      	ldr	r6, [r4, #0]
 8001602:	f000 fc2f 	bl	8001e64 <ByteSwap>
 8001606:	80b0      	strh	r0, [r6, #4]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8001608:	89aa      	ldrh	r2, [r5, #12]
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	80da      	strh	r2, [r3, #6]
  pInformation->ControlState = SETTING_UP;
 800160e:	2201      	movs	r2, #1
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 8001614:	88da      	ldrh	r2, [r3, #6]
  uint32_t RequestNo = pInformation->USBbRequest;
 8001616:	785d      	ldrb	r5, [r3, #1]
  if (pInformation->USBwLength == 0)
 8001618:	2a00      	cmp	r2, #0
 800161a:	d15f      	bne.n	80016dc <Setup0_Process+0x114>
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800161c:	781a      	ldrb	r2, [r3, #0]
 800161e:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8001622:	d148      	bne.n	80016b6 <Setup0_Process+0xee>
    if (RequestNo == SET_CONFIGURATION)
 8001624:	2d09      	cmp	r5, #9
 8001626:	d103      	bne.n	8001630 <Setup0_Process+0x68>
      Result = Standard_SetConfiguration();
 8001628:	f7ff fea2 	bl	8001370 <Standard_SetConfiguration>
  if (Result != USB_SUCCESS)
 800162c:	bb30      	cbnz	r0, 800167c <Setup0_Process+0xb4>
 800162e:	e012      	b.n	8001656 <Setup0_Process+0x8e>
    else if (RequestNo == SET_ADDRESS)
 8001630:	2d05      	cmp	r5, #5
 8001632:	d11e      	bne.n	8001672 <Setup0_Process+0xaa>
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001634:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8001638:	2a00      	cmp	r2, #0
 800163a:	da03      	bge.n	8001644 <Setup0_Process+0x7c>
        ControlState = STALLED;
 800163c:	2308      	movs	r3, #8
  pInformation->ControlState = ControlState;
 800163e:	6822      	ldr	r2, [r4, #0]
    pInformation->ControlState = STALLED;
 8001640:	7213      	strb	r3, [r2, #8]
    return;
 8001642:	e0b3      	b.n	80017ac <Setup0_Process+0x1e4>
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001644:	789a      	ldrb	r2, [r3, #2]
 8001646:	2a00      	cmp	r2, #0
 8001648:	d1f8      	bne.n	800163c <Setup0_Process+0x74>
          || (pInformation->USBwIndex != 0)
 800164a:	889a      	ldrh	r2, [r3, #4]
 800164c:	2a00      	cmp	r2, #0
 800164e:	d1f5      	bne.n	800163c <Setup0_Process+0x74>
          || (pInformation->Current_Configuration != 0))
 8001650:	7a9b      	ldrb	r3, [r3, #10]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f2      	bne.n	800163c <Setup0_Process+0x74>
  USB_StatusIn();
 8001656:	4b6d      	ldr	r3, [pc, #436]	; (800180c <Setup0_Process+0x244>)
 8001658:	f8d3 2c50 	ldr.w	r2, [r3, #3152]	; 0xc50
 800165c:	4b6d      	ldr	r3, [pc, #436]	; (8001814 <Setup0_Process+0x24c>)
 800165e:	b292      	uxth	r2, r2
 8001660:	4413      	add	r3, r2
 8001662:	2200      	movs	r2, #0
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	2230      	movs	r2, #48	; 0x30
 800166a:	4b6b      	ldr	r3, [pc, #428]	; (8001818 <Setup0_Process+0x250>)
 800166c:	801a      	strh	r2, [r3, #0]
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 800166e:	2306      	movs	r3, #6
 8001670:	e7e5      	b.n	800163e <Setup0_Process+0x76>
    else if (RequestNo == SET_FEATURE)
 8001672:	2d03      	cmp	r5, #3
 8001674:	d111      	bne.n	800169a <Setup0_Process+0xd2>
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8001676:	78da      	ldrb	r2, [r3, #3]
 8001678:	2a01      	cmp	r2, #1
 800167a:	d008      	beq.n	800168e <Setup0_Process+0xc6>
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800167c:	4b67      	ldr	r3, [pc, #412]	; (800181c <Setup0_Process+0x254>)
 800167e:	4628      	mov	r0, r5
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001686:	2803      	cmp	r0, #3
 8001688:	d125      	bne.n	80016d6 <Setup0_Process+0x10e>
      ControlState = PAUSE;
 800168a:	2309      	movs	r3, #9
 800168c:	e7d7      	b.n	800163e <Setup0_Process+0x76>
          && (pInformation->USBwIndex == 0))
 800168e:	889b      	ldrh	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f3      	bne.n	800167c <Setup0_Process+0xb4>
        Result = Standard_SetDeviceFeature();
 8001694:	f7ff ff58 	bl	8001548 <Standard_SetDeviceFeature>
 8001698:	e7c8      	b.n	800162c <Setup0_Process+0x64>
    else if (RequestNo == CLEAR_FEATURE)
 800169a:	2d01      	cmp	r5, #1
 800169c:	d1ee      	bne.n	800167c <Setup0_Process+0xb4>
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800169e:	78da      	ldrb	r2, [r3, #3]
 80016a0:	2a01      	cmp	r2, #1
 80016a2:	d1eb      	bne.n	800167c <Setup0_Process+0xb4>
          && pInformation->USBwIndex == 0
 80016a4:	889a      	ldrh	r2, [r3, #4]
 80016a6:	2a00      	cmp	r2, #0
 80016a8:	d1e8      	bne.n	800167c <Setup0_Process+0xb4>
          && ValBit(pInformation->Current_Feature, 5))
 80016aa:	7a5b      	ldrb	r3, [r3, #9]
 80016ac:	069e      	lsls	r6, r3, #26
 80016ae:	d5e5      	bpl.n	800167c <Setup0_Process+0xb4>
        Result = Standard_ClearFeature();
 80016b0:	f7ff fe9e 	bl	80013f0 <Standard_ClearFeature>
 80016b4:	e7ba      	b.n	800162c <Setup0_Process+0x64>
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80016b6:	2a01      	cmp	r2, #1
 80016b8:	d104      	bne.n	80016c4 <Setup0_Process+0xfc>
    if (RequestNo == SET_INTERFACE)
 80016ba:	2d0b      	cmp	r5, #11
 80016bc:	d1de      	bne.n	800167c <Setup0_Process+0xb4>
      Result = Standard_SetInterface();
 80016be:	f7ff fe73 	bl	80013a8 <Standard_SetInterface>
 80016c2:	e7b3      	b.n	800162c <Setup0_Process+0x64>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80016c4:	2a02      	cmp	r2, #2
 80016c6:	d1d9      	bne.n	800167c <Setup0_Process+0xb4>
    if (RequestNo == CLEAR_FEATURE)
 80016c8:	2d01      	cmp	r5, #1
 80016ca:	d0f1      	beq.n	80016b0 <Setup0_Process+0xe8>
    else if (RequestNo == SET_FEATURE)
 80016cc:	2d03      	cmp	r5, #3
 80016ce:	d1d5      	bne.n	800167c <Setup0_Process+0xb4>
      Result = Standard_SetEndPointFeature();
 80016d0:	f7ff fef8 	bl	80014c4 <Standard_SetEndPointFeature>
 80016d4:	e7aa      	b.n	800162c <Setup0_Process+0x64>
  if (Result != USB_SUCCESS)
 80016d6:	2800      	cmp	r0, #0
 80016d8:	d0bd      	beq.n	8001656 <Setup0_Process+0x8e>
 80016da:	e7af      	b.n	800163c <Setup0_Process+0x74>
  if (Request_No == GET_DESCRIPTOR)
 80016dc:	2d06      	cmp	r5, #6
 80016de:	d113      	bne.n	8001708 <Setup0_Process+0x140>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	0655      	lsls	r5, r2, #25
 80016e4:	d156      	bne.n	8001794 <Setup0_Process+0x1cc>
      uint8_t wValue1 = pInformation->USBwValue1;
 80016e6:	789b      	ldrb	r3, [r3, #2]
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80016e8:	4a4c      	ldr	r2, [pc, #304]	; (800181c <Setup0_Process+0x254>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 80016ea:	2b01      	cmp	r3, #1
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80016ec:	6812      	ldr	r2, [r2, #0]
      if (wValue1 == DEVICE_DESCRIPTOR)
 80016ee:	d103      	bne.n	80016f8 <Setup0_Process+0x130>
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80016f0:	69d3      	ldr	r3, [r2, #28]
  if (CopyRoutine)
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d04e      	beq.n	8001794 <Setup0_Process+0x1cc>
 80016f6:	e01a      	b.n	800172e <Setup0_Process+0x166>
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d101      	bne.n	8001700 <Setup0_Process+0x138>
        CopyRoutine = pProperty->GetConfigDescriptor;
 80016fc:	6a13      	ldr	r3, [r2, #32]
 80016fe:	e7f8      	b.n	80016f2 <Setup0_Process+0x12a>
      else if (wValue1 == STRING_DESCRIPTOR)
 8001700:	2b03      	cmp	r3, #3
 8001702:	d147      	bne.n	8001794 <Setup0_Process+0x1cc>
        CopyRoutine = pProperty->GetStringDescriptor;
 8001704:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001706:	e7f4      	b.n	80016f2 <Setup0_Process+0x12a>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8001708:	2d00      	cmp	r5, #0
 800170a:	d154      	bne.n	80017b6 <Setup0_Process+0x1ee>
 800170c:	8859      	ldrh	r1, [r3, #2]
 800170e:	2900      	cmp	r1, #0
 8001710:	d140      	bne.n	8001794 <Setup0_Process+0x1cc>
           && (pInformation->USBwIndex1 == 0))
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001718:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800171c:	d13a      	bne.n	8001794 <Setup0_Process+0x1cc>
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8001724:	d111      	bne.n	800174a <Setup0_Process+0x182>
        && (pInformation->USBwIndex == 0))
 8001726:	889b      	ldrh	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d133      	bne.n	8001794 <Setup0_Process+0x1cc>
      CopyRoutine = Standard_GetStatus;
 800172c:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <Setup0_Process+0x258>)
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800172e:	2500      	movs	r5, #0
 8001730:	6822      	ldr	r2, [r4, #0]
    (*CopyRoutine)(0);
 8001732:	4628      	mov	r0, r5
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001734:	8255      	strh	r5, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001736:	6193      	str	r3, [r2, #24]
    (*CopyRoutine)(0);
 8001738:	4798      	blx	r3
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800173a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800173e:	6822      	ldr	r2, [r4, #0]
 8001740:	8a13      	ldrh	r3, [r2, #16]
 8001742:	428b      	cmp	r3, r1
 8001744:	d15a      	bne.n	80017fc <Setup0_Process+0x234>
    pInformation->ControlState = PAUSE;
 8001746:	2309      	movs	r3, #9
 8001748:	e77a      	b.n	8001640 <Setup0_Process+0x78>
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800174a:	2a01      	cmp	r2, #1
 800174c:	d10a      	bne.n	8001764 <Setup0_Process+0x19c>
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800174e:	4a33      	ldr	r2, [pc, #204]	; (800181c <Setup0_Process+0x254>)
 8001750:	7958      	ldrb	r0, [r3, #5]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	6992      	ldr	r2, [r2, #24]
 8001756:	4790      	blx	r2
 8001758:	b9e0      	cbnz	r0, 8001794 <Setup0_Process+0x1cc>
          && (pInformation->Current_Configuration != 0))
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	7a9b      	ldrb	r3, [r3, #10]
          && (Status != 0))
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1e4      	bne.n	800172c <Setup0_Process+0x164>
 8001762:	e017      	b.n	8001794 <Setup0_Process+0x1cc>
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001764:	2a02      	cmp	r2, #2
 8001766:	d115      	bne.n	8001794 <Setup0_Process+0x1cc>
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8001768:	795a      	ldrb	r2, [r3, #5]
 800176a:	f002 010f 	and.w	r1, r2, #15
        Status = _GetEPTxStatus(Related_Endpoint);
 800176e:	008b      	lsls	r3, r1, #2
      if (ValBit(pInformation->USBwIndex0, 7))
 8001770:	0610      	lsls	r0, r2, #24
        Status = _GetEPTxStatus(Related_Endpoint);
 8001772:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001776:	482b      	ldr	r0, [pc, #172]	; (8001824 <Setup0_Process+0x25c>)
        Status = _GetEPTxStatus(Related_Endpoint);
 8001778:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800177c:	681b      	ldr	r3, [r3, #0]
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800177e:	7800      	ldrb	r0, [r0, #0]
        Status = _GetEPTxStatus(Related_Endpoint);
 8001780:	bf4c      	ite	mi
 8001782:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
        Status = _GetEPRxStatus(Related_Endpoint);
 8001786:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800178a:	4288      	cmp	r0, r1
 800178c:	d902      	bls.n	8001794 <Setup0_Process+0x1cc>
 800178e:	f012 0f70 	tst.w	r2, #112	; 0x70
 8001792:	d0e4      	beq.n	800175e <Setup0_Process+0x196>
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <Setup0_Process+0x254>)
 8001796:	6822      	ldr	r2, [r4, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	7850      	ldrb	r0, [r2, #1]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80017a0:	2803      	cmp	r0, #3
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80017a2:	4605      	mov	r5, r0
    if (Result == USB_NOT_READY)
 80017a4:	d1c9      	bne.n	800173a <Setup0_Process+0x172>
      pInformation->ControlState = PAUSE;
 80017a6:	2209      	movs	r2, #9
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	721a      	strb	r2, [r3, #8]
}
 80017ac:	b002      	add	sp, #8
 80017ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return Post0_Process();
 80017b2:	f7ff bee9 	b.w	8001588 <Post0_Process>
  else if (Request_No == GET_CONFIGURATION)
 80017b6:	2d08      	cmp	r5, #8
 80017b8:	d104      	bne.n	80017c4 <Setup0_Process+0x1fc>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	065b      	lsls	r3, r3, #25
 80017be:	d1e9      	bne.n	8001794 <Setup0_Process+0x1cc>
      CopyRoutine = Standard_GetConfiguration;
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <Setup0_Process+0x260>)
 80017c2:	e7b4      	b.n	800172e <Setup0_Process+0x166>
  else if (Request_No == GET_INTERFACE)
 80017c4:	2d0a      	cmp	r5, #10
 80017c6:	d1e5      	bne.n	8001794 <Setup0_Process+0x1cc>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80017c8:	781a      	ldrb	r2, [r3, #0]
 80017ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017ce:	2a01      	cmp	r2, #1
 80017d0:	d1e0      	bne.n	8001794 <Setup0_Process+0x1cc>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 80017d2:	7a9a      	ldrb	r2, [r3, #10]
 80017d4:	2a00      	cmp	r2, #0
 80017d6:	d0dd      	beq.n	8001794 <Setup0_Process+0x1cc>
 80017d8:	8859      	ldrh	r1, [r3, #2]
 80017da:	2900      	cmp	r1, #0
 80017dc:	d1da      	bne.n	8001794 <Setup0_Process+0x1cc>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80017e4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80017e8:	d1d4      	bne.n	8001794 <Setup0_Process+0x1cc>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 80017ea:	4a0c      	ldr	r2, [pc, #48]	; (800181c <Setup0_Process+0x254>)
 80017ec:	7958      	ldrb	r0, [r3, #5]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	6992      	ldr	r2, [r2, #24]
 80017f2:	4790      	blx	r2
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d1cd      	bne.n	8001794 <Setup0_Process+0x1cc>
      CopyRoutine = Standard_GetInterface;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <Setup0_Process+0x264>)
 80017fa:	e798      	b.n	800172e <Setup0_Process+0x166>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80017fc:	2d02      	cmp	r5, #2
 80017fe:	d000      	beq.n	8001802 <Setup0_Process+0x23a>
 8001800:	b9b3      	cbnz	r3, 8001830 <Setup0_Process+0x268>
    pInformation->ControlState = STALLED;
 8001802:	2308      	movs	r3, #8
 8001804:	e71c      	b.n	8001640 <Setup0_Process+0x78>
 8001806:	bf00      	nop
 8001808:	200001dc 	.word	0x200001dc
 800180c:	40005000 	.word	0x40005000
 8001810:	20003004 	.word	0x20003004
 8001814:	20003002 	.word	0x20003002
 8001818:	200001ec 	.word	0x200001ec
 800181c:	200001e0 	.word	0x200001e0
 8001820:	08001239 	.word	0x08001239
 8001824:	20000094 	.word	0x20000094
 8001828:	080011f1 	.word	0x080011f1
 800182c:	08001215 	.word	0x08001215
  if (ValBit(pInformation->USBbmRequestType, 7))
 8001830:	f992 1000 	ldrsb.w	r1, [r2]
 8001834:	2900      	cmp	r1, #0
 8001836:	da20      	bge.n	800187a <Setup0_Process+0x2b2>
    __IO uint32_t wLength = pInformation->USBwLength;
 8001838:	88d4      	ldrh	r4, [r2, #6]
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800183a:	4913      	ldr	r1, [pc, #76]	; (8001888 <Setup0_Process+0x2c0>)
    __IO uint32_t wLength = pInformation->USBwLength;
 800183c:	9401      	str	r4, [sp, #4]
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800183e:	6809      	ldr	r1, [r1, #0]
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8001840:	9d01      	ldr	r5, [sp, #4]
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001842:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8001846:	42ab      	cmp	r3, r5
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001848:	4601      	mov	r1, r0
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800184a:	d905      	bls.n	8001858 <Setup0_Process+0x290>
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 800184c:	9b01      	ldr	r3, [sp, #4]
 800184e:	8213      	strh	r3, [r2, #16]
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8001850:	8291      	strh	r1, [r2, #20]
    DataStageIn();
 8001852:	f7ff fd37 	bl	80012c4 <DataStageIn>
 8001856:	e7a9      	b.n	80017ac <Setup0_Process+0x1e4>
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001858:	42a3      	cmp	r3, r4
 800185a:	d2f9      	bcs.n	8001850 <Setup0_Process+0x288>
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800185c:	4283      	cmp	r3, r0
 800185e:	d203      	bcs.n	8001868 <Setup0_Process+0x2a0>
        Data_Mul_MaxPacketSize = FALSE;
 8001860:	2000      	movs	r0, #0
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <Setup0_Process+0x2c4>)
        Data_Mul_MaxPacketSize = TRUE;
 8001864:	7018      	strb	r0, [r3, #0]
 8001866:	e7f3      	b.n	8001850 <Setup0_Process+0x288>
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8001868:	fbb3 f4f0 	udiv	r4, r3, r0
 800186c:	fb00 3314 	mls	r3, r0, r4, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ed      	bne.n	8001850 <Setup0_Process+0x288>
        Data_Mul_MaxPacketSize = TRUE;
 8001874:	2001      	movs	r0, #1
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <Setup0_Process+0x2c4>)
 8001878:	e7f4      	b.n	8001864 <Setup0_Process+0x29c>
    pInformation->ControlState = OUT_DATA;
 800187a:	2303      	movs	r3, #3
 800187c:	7213      	strb	r3, [r2, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800187e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001882:	4b03      	ldr	r3, [pc, #12]	; (8001890 <Setup0_Process+0x2c8>)
 8001884:	801a      	strh	r2, [r3, #0]
 8001886:	e791      	b.n	80017ac <Setup0_Process+0x1e4>
 8001888:	200001e0 	.word	0x200001e0
 800188c:	200001b8 	.word	0x200001b8
 8001890:	200001ea 	.word	0x200001ea

08001894 <Out0_Process>:
{
 8001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 8001896:	4e2c      	ldr	r6, [pc, #176]	; (8001948 <Out0_Process+0xb4>)
 8001898:	6834      	ldr	r4, [r6, #0]
 800189a:	7a23      	ldrb	r3, [r4, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800189c:	2b02      	cmp	r3, #2
 800189e:	d050      	beq.n	8001942 <Out0_Process+0xae>
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d04e      	beq.n	8001942 <Out0_Process+0xae>
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d001      	beq.n	80018ac <Out0_Process+0x18>
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	d144      	bne.n	8001936 <Out0_Process+0xa2>
  if (pEPinfo->CopyData && save_rLength)
 80018ac:	69a3      	ldr	r3, [r4, #24]
 80018ae:	b1b3      	cbz	r3, 80018de <Out0_Process+0x4a>
  save_rLength = pEPinfo->Usb_rLength;
 80018b0:	8a25      	ldrh	r5, [r4, #16]
  if (pEPinfo->CopyData && save_rLength)
 80018b2:	b30d      	cbz	r5, 80018f8 <Out0_Process+0x64>
    Length = pEPinfo->PacketSize;
 80018b4:	8aa2      	ldrh	r2, [r4, #20]
    Buffer = (*pEPinfo->CopyData)(Length);
 80018b6:	4295      	cmp	r5, r2
 80018b8:	bf28      	it	cs
 80018ba:	4615      	movcs	r5, r2
 80018bc:	4628      	mov	r0, r5
 80018be:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 80018c0:	8a23      	ldrh	r3, [r4, #16]
    Buffer = (*pEPinfo->CopyData)(Length);
 80018c2:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 80018c4:	1b5b      	subs	r3, r3, r5
 80018c6:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80018c8:	8a63      	ldrh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80018ca:	2000      	movs	r0, #0
    pEPinfo->Usb_rOffset += Length;
 80018cc:	442b      	add	r3, r5
 80018ce:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80018d0:	f000 fa74 	bl	8001dbc <GetEPRxAddr>
 80018d4:	462a      	mov	r2, r5
 80018d6:	4601      	mov	r1, r0
 80018d8:	4638      	mov	r0, r7
 80018da:	f000 f984 	bl	8001be6 <PMAToUserBufferCopy>
  if (pEPinfo->Usb_rLength != 0)
 80018de:	8a23      	ldrh	r3, [r4, #16]
 80018e0:	b153      	cbz	r3, 80018f8 <Out0_Process+0x64>
    SetEPTxCount(ENDP0, 0);
 80018e2:	2100      	movs	r1, #0
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80018e4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <Out0_Process+0xb8>)
    SetEPTxCount(ENDP0, 0);
 80018ea:	4608      	mov	r0, r1
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80018ec:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 80018ee:	f000 fa75 	bl	8001ddc <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80018f2:	2230      	movs	r2, #48	; 0x30
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <Out0_Process+0xbc>)
 80018f6:	801a      	strh	r2, [r3, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80018f8:	8a21      	ldrh	r1, [r4, #16]
 80018fa:	8aa3      	ldrh	r3, [r4, #20]
    pInformation->ControlState = OUT_DATA;
 80018fc:	6832      	ldr	r2, [r6, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80018fe:	428b      	cmp	r3, r1
 8001900:	d808      	bhi.n	8001914 <Out0_Process+0x80>
    pInformation->ControlState = OUT_DATA;
 8001902:	2303      	movs	r3, #3
      pInformation->ControlState = LAST_OUT_DATA;
 8001904:	7213      	strb	r3, [r2, #8]
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8001906:	7a13      	ldrb	r3, [r2, #8]
  pInformation->ControlState = ControlState;
 8001908:	6832      	ldr	r2, [r6, #0]
 800190a:	7213      	strb	r3, [r2, #8]
}
 800190c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return Post0_Process();
 8001910:	f7ff be3a 	b.w	8001588 <Post0_Process>
    if (pEPinfo->Usb_rLength > 0)
 8001914:	b109      	cbz	r1, 800191a <Out0_Process+0x86>
      pInformation->ControlState = LAST_OUT_DATA;
 8001916:	2305      	movs	r3, #5
 8001918:	e7f4      	b.n	8001904 <Out0_Process+0x70>
      pInformation->ControlState = WAIT_STATUS_IN;
 800191a:	2306      	movs	r3, #6
 800191c:	7213      	strb	r3, [r2, #8]
      USB_StatusIn();
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <Out0_Process+0xc0>)
 8001920:	f8d3 0c50 	ldr.w	r0, [r3, #3152]	; 0xc50
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <Out0_Process+0xc4>)
 8001926:	b280      	uxth	r0, r0
 8001928:	4403      	add	r3, r0
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	6019      	str	r1, [r3, #0]
 800192e:	2130      	movs	r1, #48	; 0x30
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <Out0_Process+0xbc>)
 8001932:	8019      	strh	r1, [r3, #0]
 8001934:	e7e7      	b.n	8001906 <Out0_Process+0x72>
  else if (ControlState == WAIT_STATUS_OUT)
 8001936:	2b07      	cmp	r3, #7
 8001938:	d103      	bne.n	8001942 <Out0_Process+0xae>
    (*pProperty->Process_Status_OUT)();
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <Out0_Process+0xc8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4798      	blx	r3
    ControlState = STALLED;
 8001942:	2308      	movs	r3, #8
 8001944:	e7e0      	b.n	8001908 <Out0_Process+0x74>
 8001946:	bf00      	nop
 8001948:	200001dc 	.word	0x200001dc
 800194c:	200001ea 	.word	0x200001ea
 8001950:	200001ec 	.word	0x200001ec
 8001954:	40005000 	.word	0x40005000
 8001958:	20003002 	.word	0x20003002
 800195c:	200001e0 	.word	0x200001e0

08001960 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8001960:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8001962:	2100      	movs	r1, #0
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8001964:	f640 750f 	movw	r5, #3855	; 0xf0f
 8001968:	f248 0680 	movw	r6, #32896	; 0x8080
  uint32_t nEP = Device_Table.Total_Endpoint;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <SetDeviceAddress+0x38>)
 800196e:	781c      	ldrb	r4, [r3, #0]
  for (i = 0; i < nEP; i++)
 8001970:	42a1      	cmp	r1, r4
 8001972:	d305      	bcc.n	8001980 <SetDeviceAddress+0x20>
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <SetDeviceAddress+0x3c>)
 8001976:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800197a:	f8c3 0c4c 	str.w	r0, [r3, #3148]	; 0xc4c
}
 800197e:	bd70      	pop	{r4, r5, r6, pc}
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8001980:	008a      	lsls	r2, r1, #2
 8001982:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001986:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800198a:	6813      	ldr	r3, [r2, #0]
 800198c:	402b      	ands	r3, r5
 800198e:	430b      	orrs	r3, r1
 8001990:	4333      	orrs	r3, r6
 8001992:	6013      	str	r3, [r2, #0]
  for (i = 0; i < nEP; i++)
 8001994:	3101      	adds	r1, #1
 8001996:	e7eb      	b.n	8001970 <SetDeviceAddress+0x10>
 8001998:	20000094 	.word	0x20000094
 800199c:	40005000 	.word	0x40005000

080019a0 <In0_Process>:
{
 80019a0:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 80019a2:	4c13      	ldr	r4, [pc, #76]	; (80019f0 <In0_Process+0x50>)
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	7a1a      	ldrb	r2, [r3, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80019a8:	2a02      	cmp	r2, #2
 80019aa:	d001      	beq.n	80019b0 <In0_Process+0x10>
 80019ac:	2a04      	cmp	r2, #4
 80019ae:	d109      	bne.n	80019c4 <In0_Process+0x24>
    DataStageIn();
 80019b0:	f7ff fc88 	bl	80012c4 <DataStageIn>
    ControlState = pInformation->ControlState;
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	7a1b      	ldrb	r3, [r3, #8]
  pInformation->ControlState = ControlState;
 80019b8:	6822      	ldr	r2, [r4, #0]
 80019ba:	7213      	strb	r3, [r2, #8]
}
 80019bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return Post0_Process();
 80019c0:	f7ff bde2 	b.w	8001588 <Post0_Process>
  else if (ControlState == WAIT_STATUS_IN)
 80019c4:	2a06      	cmp	r2, #6
 80019c6:	d110      	bne.n	80019ea <In0_Process+0x4a>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80019c8:	785a      	ldrb	r2, [r3, #1]
 80019ca:	2a05      	cmp	r2, #5
 80019cc:	d109      	bne.n	80019e2 <In0_Process+0x42>
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	0652      	lsls	r2, r2, #25
 80019d2:	d106      	bne.n	80019e2 <In0_Process+0x42>
      SetDeviceAddress(pInformation->USBwValue0);
 80019d4:	78d8      	ldrb	r0, [r3, #3]
 80019d6:	f7ff ffc3 	bl	8001960 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <In0_Process+0x54>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4798      	blx	r3
    (*pProperty->Process_Status_IN)();
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <In0_Process+0x58>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4798      	blx	r3
    ControlState = STALLED;
 80019ea:	2308      	movs	r3, #8
 80019ec:	e7e4      	b.n	80019b8 <In0_Process+0x18>
 80019ee:	bf00      	nop
 80019f0:	200001dc 	.word	0x200001dc
 80019f4:	200001e4 	.word	0x200001e4
 80019f8:	200001e0 	.word	0x200001e0

080019fc <NOP_Process>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80019fc:	4770      	bx	lr
	...

08001a00 <USB_Init>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <USB_Init+0x1c>)
 8001a02:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <USB_Init+0x20>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <USB_Init+0x24>)
  pInformation = &Device_Info;
 8001a06:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8001a08:	2202      	movs	r2, #2
 8001a0a:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <USB_Init+0x28>)
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <USB_Init+0x2c>)
 8001a10:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8001a12:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <USB_Init+0x30>)
  /* Initialize devices one by one */
  pProperty->Init();
 8001a14:	681b      	ldr	r3, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8001a16:	6011      	str	r1, [r2, #0]
  pProperty->Init();
 8001a18:	4718      	bx	r3
 8001a1a:	bf00      	nop
 8001a1c:	200001bc 	.word	0x200001bc
 8001a20:	200001dc 	.word	0x200001dc
 8001a24:	200000b8 	.word	0x200000b8
 8001a28:	20000064 	.word	0x20000064
 8001a2c:	200001e0 	.word	0x200001e0
 8001a30:	200001e4 	.word	0x200001e4

08001a34 <CTR_LP>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8001a34:	2300      	movs	r3, #0
{
 8001a36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8001a3a:	4c5c      	ldr	r4, [pc, #368]	; (8001bac <CTR_LP+0x178>)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8001a3c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8001bb0 <CTR_LP+0x17c>
  __IO uint16_t wEPVal = 0;
 8001a40:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8001a44:	f8d4 3c44 	ldr.w	r3, [r4, #3140]	; 0xc44
 8001a48:	4a5a      	ldr	r2, [pc, #360]	; (8001bb4 <CTR_LP+0x180>)
 8001a4a:	b299      	uxth	r1, r3
 8001a4c:	041b      	lsls	r3, r3, #16
 8001a4e:	8011      	strh	r1, [r2, #0]
 8001a50:	d552      	bpl.n	8001af8 <CTR_LP+0xc4>
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8001a52:	8813      	ldrh	r3, [r2, #0]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	f888 3000 	strb.w	r3, [r8]
    if (EPindex == 0)
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d16f      	bne.n	8001b40 <CTR_LP+0x10c>
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8001a60:	f64b 77bf 	movw	r7, #49087	; 0xbfbf
	    SaveRState = _GetENDPOINT(ENDP0);
 8001a64:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
 8001a68:	4d53      	ldr	r5, [pc, #332]	; (8001bb8 <CTR_LP+0x184>)
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8001a6e:	882b      	ldrh	r3, [r5, #0]
 8001a70:	4e52      	ldr	r6, [pc, #328]	; (8001bbc <CTR_LP+0x188>)
 8001a72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a76:	8033      	strh	r3, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 8001a78:	882b      	ldrh	r3, [r5, #0]
 8001a7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a7e:	802b      	strh	r3, [r5, #0]
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8001a80:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
 8001a84:	403b      	ands	r3, r7
 8001a86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a8a:	f083 0320 	eor.w	r3, r3, #32
 8001a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a96:	f8c4 3c00 	str.w	r3, [r4, #3072]	; 0xc00

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8001a9a:	8813      	ldrh	r3, [r2, #0]
 8001a9c:	f013 0f10 	tst.w	r3, #16
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8001aa0:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
      if ((wIstr & ISTR_DIR) == 0)
 8001aa4:	d12b      	bne.n	8001afe <CTR_LP+0xca>
        _ClearEP_CTR_TX(ENDP0);
 8001aa6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aae:	041b      	lsls	r3, r3, #16
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	f8c4 3c00 	str.w	r3, [r4, #3072]	; 0xc00
        In0_Process();
 8001ab6:	f7ff ff73 	bl	80019a0 <In0_Process>
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8001aba:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
 8001abe:	882a      	ldrh	r2, [r5, #0]
 8001ac0:	403b      	ands	r3, r7
 8001ac2:	04d7      	lsls	r7, r2, #19
 8001ac4:	882a      	ldrh	r2, [r5, #0]
 8001ac6:	bf48      	it	mi
 8001ac8:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8001acc:	0495      	lsls	r5, r2, #18
 8001ace:	8832      	ldrh	r2, [r6, #0]
 8001ad0:	bf48      	it	mi
 8001ad2:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8001ad6:	06d4      	lsls	r4, r2, #27
 8001ad8:	8832      	ldrh	r2, [r6, #0]
 8001ada:	bf48      	it	mi
 8001adc:	f083 0310 	eormi.w	r3, r3, #16
 8001ae0:	0690      	lsls	r0, r2, #26
 8001ae2:	bf48      	it	mi
 8001ae4:	f083 0320 	eormi.w	r3, r3, #32
 8001ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aec:	4a2f      	ldr	r2, [pc, #188]	; (8001bac <CTR_LP+0x178>)
 8001aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8001af8:	b002      	add	sp, #8
 8001afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        wEPVal = _GetENDPOINT(ENDP0);
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal &EP_SETUP) != 0)
 8001b04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001b08:	051a      	lsls	r2, r3, #20
 8001b0a:	d50a      	bpl.n	8001b22 <CTR_LP+0xee>
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8001b0c:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
 8001b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b14:	051b      	lsls	r3, r3, #20
 8001b16:	0d1b      	lsrs	r3, r3, #20
 8001b18:	f8c4 3c00 	str.w	r3, [r4, #3072]	; 0xc00
          Setup0_Process();
 8001b1c:	f7ff fd54 	bl	80015c8 <Setup0_Process>
		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8001b20:	e7cb      	b.n	8001aba <CTR_LP+0x86>
        else if ((wEPVal & EP_CTR_RX) != 0)
 8001b22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	d58c      	bpl.n	8001a44 <CTR_LP+0x10>
          _ClearEP_CTR_RX(ENDP0);
 8001b2a:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
 8001b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b32:	051b      	lsls	r3, r3, #20
 8001b34:	0d1b      	lsrs	r3, r3, #20
 8001b36:	f8c4 3c00 	str.w	r3, [r4, #3072]	; 0xc00
          Out0_Process();
 8001b3a:	f7ff feab 	bl	8001894 <Out0_Process>
 8001b3e:	e7bc      	b.n	8001aba <CTR_LP+0x86>
      wEPVal = _GetENDPOINT(EPindex);
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b46:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	b292      	uxth	r2, r2
 8001b4e:	f8ad 2006 	strh.w	r2, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8001b52:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8001b56:	0411      	lsls	r1, r2, #16
 8001b58:	d50c      	bpl.n	8001b74 <CTR_LP+0x140>
        _ClearEP_CTR_RX(EPindex);
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b60:	0512      	lsls	r2, r2, #20
 8001b62:	0d12      	lsrs	r2, r2, #20
 8001b64:	601a      	str	r2, [r3, #0]
        (*pEpInt_OUT[EPindex-1])();
 8001b66:	f898 3000 	ldrb.w	r3, [r8]
 8001b6a:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <CTR_LP+0x18c>)
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b72:	4798      	blx	r3
      if ((wEPVal & EP_CTR_TX) != 0)
 8001b74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001b78:	061a      	lsls	r2, r3, #24
 8001b7a:	f57f af63 	bpl.w	8001a44 <CTR_LP+0x10>
        _ClearEP_CTR_TX(EPindex);
 8001b7e:	f898 3000 	ldrb.w	r3, [r8]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b88:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	f422 42e1 	bic.w	r2, r2, #28800	; 0x7080
 8001b92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b96:	0412      	lsls	r2, r2, #16
 8001b98:	0c12      	lsrs	r2, r2, #16
 8001b9a:	601a      	str	r2, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 8001b9c:	f898 3000 	ldrb.w	r3, [r8]
 8001ba0:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <CTR_LP+0x190>)
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	4798      	blx	r3
 8001baa:	e74b      	b.n	8001a44 <CTR_LP+0x10>
 8001bac:	40005000 	.word	0x40005000
 8001bb0:	200001d8 	.word	0x200001d8
 8001bb4:	20000188 	.word	0x20000188
 8001bb8:	200001ea 	.word	0x200001ea
 8001bbc:	200001ec 	.word	0x200001ec
 8001bc0:	20000038 	.word	0x20000038
 8001bc4:	2000001c 	.word	0x2000001c

08001bc8 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8001bc8:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001bcc:	3201      	adds	r2, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8001bce:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001bd2:	1052      	asrs	r2, r2, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8001bd4:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8001bd6:	b902      	cbnz	r2, 8001bda <UserToPMABufferCopy+0x12>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001bd8:	4770      	bx	lr
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8001bda:	f830 3b02 	ldrh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 8001bde:	3a01      	subs	r2, #1
    *pdwVal++ = temp2;
 8001be0:	f821 3b04 	strh.w	r3, [r1], #4
  for (i = n; i != 0; i--)
 8001be4:	e7f7      	b.n	8001bd6 <UserToPMABufferCopy+0xe>

08001be6 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001be6:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8001bea:	3201      	adds	r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001bec:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8001bf0:	1052      	asrs	r2, r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001bf2:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8001bf4:	b902      	cbnz	r2, 8001bf8 <PMAToUserBufferCopy+0x12>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8001bf6:	4770      	bx	lr
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001bf8:	f851 3b04 	ldr.w	r3, [r1], #4
  for (i = n; i != 0; i--)
 8001bfc:	3a01      	subs	r2, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001bfe:	f820 3b02 	strh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 8001c02:	e7f7      	b.n	8001bf4 <PMAToUserBufferCopy+0xe>

08001c04 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <SetBTABLE+0x10>)
 8001c06:	f020 0007 	bic.w	r0, r0, #7
 8001c0a:	b280      	uxth	r0, r0
 8001c0c:	f8c3 0c50 	str.w	r0, [r3, #3152]	; 0xc50
}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40005000 	.word	0x40005000

08001c18 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8001c18:	0080      	lsls	r0, r0, #2
 8001c1a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001c1e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001c22:	6803      	ldr	r3, [r0, #0]
 8001c24:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	6003      	str	r3, [r0, #0]
}
 8001c32:	4770      	bx	lr

08001c34 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8001c34:	0080      	lsls	r0, r0, #2
 8001c36:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001c3a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001c3e:	6803      	ldr	r3, [r0, #0]
 8001c40:	06ca      	lsls	r2, r1, #27
 8001c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	bf48      	it	mi
 8001c4e:	f083 0310 	eormi.w	r3, r3, #16
 8001c52:	068a      	lsls	r2, r1, #26
 8001c54:	bf48      	it	mi
 8001c56:	f083 0320 	eormi.w	r3, r3, #32
 8001c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c62:	6003      	str	r3, [r0, #0]
}
 8001c64:	4770      	bx	lr

08001c66 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8001c66:	0080      	lsls	r0, r0, #2
 8001c68:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001c6c:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001c70:	6803      	ldr	r3, [r0, #0]
 8001c72:	04ca      	lsls	r2, r1, #19
 8001c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	bf48      	it	mi
 8001c80:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8001c84:	048a      	lsls	r2, r1, #18
 8001c86:	bf48      	it	mi
 8001c88:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8001c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c94:	6003      	str	r3, [r0, #0]
}
 8001c96:	4770      	bx	lr

08001c98 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8001c98:	0080      	lsls	r0, r0, #2
 8001c9a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001c9e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001ca2:	6803      	ldr	r3, [r0, #0]
 8001ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cba:	6003      	str	r3, [r0, #0]
}
 8001cbc:	4770      	bx	lr

08001cbe <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8001cbe:	0080      	lsls	r0, r0, #2
 8001cc0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001cc4:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001cc8:	6803      	ldr	r3, [r0, #0]
 8001cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce0:	6003      	str	r3, [r0, #0]
}
 8001ce2:	4770      	bx	lr

08001ce4 <ClearEP_KIND>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEP_KIND(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8001ce4:	0080      	lsls	r0, r0, #2
 8001ce6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001cea:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001cee:	6803      	ldr	r3, [r0, #0]
 8001cf0:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001cf4:	051b      	lsls	r3, r3, #20
 8001cf6:	0d1b      	lsrs	r3, r3, #20
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	6003      	str	r3, [r0, #0]
}
 8001d02:	4770      	bx	lr

08001d04 <Clear_Status_Out>:
 8001d04:	f7ff bfee 	b.w	8001ce4 <ClearEP_KIND>

08001d08 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8001d08:	0080      	lsls	r0, r0, #2
 8001d0a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001d0e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001d12:	6803      	ldr	r3, [r0, #0]
 8001d14:	045b      	lsls	r3, r3, #17
 8001d16:	d509      	bpl.n	8001d2c <ClearDTOG_RX+0x24>
 8001d18:	6803      	ldr	r3, [r0, #0]
 8001d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d1e:	051b      	lsls	r3, r3, #20
 8001d20:	0d1b      	lsrs	r3, r3, #20
 8001d22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2a:	6003      	str	r3, [r0, #0]
}
 8001d2c:	4770      	bx	lr

08001d2e <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8001d2e:	0080      	lsls	r0, r0, #2
 8001d30:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001d34:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001d38:	6803      	ldr	r3, [r0, #0]
 8001d3a:	065b      	lsls	r3, r3, #25
 8001d3c:	d509      	bpl.n	8001d52 <ClearDTOG_TX+0x24>
 8001d3e:	6803      	ldr	r3, [r0, #0]
 8001d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d44:	051b      	lsls	r3, r3, #20
 8001d46:	0d1b      	lsrs	r3, r3, #20
 8001d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d50:	6003      	str	r3, [r0, #0]
}
 8001d52:	4770      	bx	lr

08001d54 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <SetEPTxAddr+0x20>)
 8001d56:	0849      	lsrs	r1, r1, #1
 8001d58:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8001d5c:	0049      	lsls	r1, r1, #1
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001d64:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8001d68:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8001d6c:	0040      	lsls	r0, r0, #1
 8001d6e:	6001      	str	r1, [r0, #0]
}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40005000 	.word	0x40005000

08001d78 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <SetEPRxAddr+0x1c>)
 8001d7a:	0849      	lsrs	r1, r1, #1
 8001d7c:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8001d80:	0049      	lsls	r1, r1, #1
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <SetEPRxAddr+0x20>)
 8001d8a:	4403      	add	r3, r0
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	6019      	str	r1, [r3, #0]
}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40005000 	.word	0x40005000
 8001d98:	20003004 	.word	0x20003004

08001d9c <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <GetEPTxAddr+0x1c>)
 8001d9e:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001da8:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8001dac:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8001db0:	0040      	lsls	r0, r0, #1
}
 8001db2:	8800      	ldrh	r0, [r0, #0]
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40005000 	.word	0x40005000

08001dbc <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <GetEPRxAddr+0x18>)
 8001dbe:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <GetEPRxAddr+0x1c>)
 8001dca:	4403      	add	r3, r0
 8001dcc:	005b      	lsls	r3, r3, #1
}
 8001dce:	8818      	ldrh	r0, [r3, #0]
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40005000 	.word	0x40005000
 8001dd8:	20003004 	.word	0x20003004

08001ddc <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SetEPTxCount+0x18>)
 8001dde:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <SetEPTxCount+0x1c>)
 8001dea:	4403      	add	r3, r0
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	6019      	str	r1, [r3, #0]
}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40005000 	.word	0x40005000
 8001df8:	20003002 	.word	0x20003002

08001dfc <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <SetEPRxCount+0x3c>)
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <SetEPRxCount+0x40>)
 8001e00:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8001e04:	293e      	cmp	r1, #62	; 0x3e
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001e0c:	4402      	add	r2, r0
 8001e0e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8001e12:	d90a      	bls.n	8001e2a <SetEPRxCount+0x2e>
 8001e14:	094b      	lsrs	r3, r1, #5
 8001e16:	06c8      	lsls	r0, r1, #27
 8001e18:	bf04      	itt	eq
 8001e1a:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8001e1e:	b29b      	uxtheq	r3, r3
 8001e20:	029b      	lsls	r3, r3, #10
 8001e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	4770      	bx	lr
  _SetEPRxCount(bEpNum, wCount);
 8001e2a:	084b      	lsrs	r3, r1, #1
 8001e2c:	07c9      	lsls	r1, r1, #31
 8001e2e:	bf48      	it	mi
 8001e30:	3301      	addmi	r3, #1
 8001e32:	029b      	lsls	r3, r3, #10
 8001e34:	e7f7      	b.n	8001e26 <SetEPRxCount+0x2a>
 8001e36:	bf00      	nop
 8001e38:	40005000 	.word	0x40005000
 8001e3c:	20003006 	.word	0x20003006

08001e40 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <GetEPRxCount+0x1c>)
 8001e42:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <GetEPRxCount+0x20>)
 8001e4e:	4403      	add	r3, r0
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	6818      	ldr	r0, [r3, #0]
}
 8001e54:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40005000 	.word	0x40005000
 8001e60:	20003006 	.word	0x20003006

08001e64 <ByteSwap>:
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
 8001e64:	ba40      	rev16	r0, r0
}
 8001e66:	b280      	uxth	r0, r0
 8001e68:	4770      	bx	lr
	...

08001e6c <USB_SIL_Init>:
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8001e6c:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  _SetISTR(0);
 8001e70:	2000      	movs	r0, #0
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <USB_SIL_Init+0x18>)
  wInterrupt_Mask = IMR_MSK;
 8001e74:	4904      	ldr	r1, [pc, #16]	; (8001e88 <USB_SIL_Init+0x1c>)
  _SetISTR(0);
 8001e76:	f8c3 0c44 	str.w	r0, [r3, #3140]	; 0xc44
  wInterrupt_Mask = IMR_MSK;
 8001e7a:	800a      	strh	r2, [r1, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8001e7c:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
  return 0;
}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40005000 	.word	0x40005000
 8001e88:	200001e8 	.word	0x200001e8

08001e8c <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8001e8c:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8001e8e:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8001e92:	4628      	mov	r0, r5
{
 8001e94:	460e      	mov	r6, r1
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8001e96:	f7ff ffd3 	bl	8001e40 <GetEPRxCount>
 8001e9a:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	f7ff ff8d 	bl	8001dbc <GetEPRxAddr>
 8001ea2:	4622      	mov	r2, r4
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	4630      	mov	r0, r6
 8001ea8:	f7ff fe9d 	bl	8001be6 <PMAToUserBufferCopy>

  /* Return the number of received data */
  return DataLength;
}
 8001eac:	4620      	mov	r0, r4
 8001eae:	bd70      	pop	{r4, r5, r6, pc}

08001eb0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001eb0:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <SystemInit+0xe0>)
{
 8001eb2:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001ebc:	6859      	ldr	r1, [r3, #4]
 8001ebe:	4a35      	ldr	r2, [pc, #212]	; (8001f94 <SystemInit+0xe4>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001eca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ece:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001ede:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001ee0:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001ee4:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	9200      	str	r2, [sp, #0]
 8001eea:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ef2:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001efa:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 8001efc:	9a00      	ldr	r2, [sp, #0]
 8001efe:	3201      	adds	r2, #1
 8001f00:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001f02:	9a01      	ldr	r2, [sp, #4]
 8001f04:	b91a      	cbnz	r2, 8001f0e <SystemInit+0x5e>
 8001f06:	9a00      	ldr	r2, [sp, #0]
 8001f08:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8001f0c:	d1f2      	bne.n	8001ef4 <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8001f14:	bf18      	it	ne
 8001f16:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001f18:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001f1a:	9a01      	ldr	r2, [sp, #4]
 8001f1c:	2a01      	cmp	r2, #1
 8001f1e:	d130      	bne.n	8001f82 <SystemInit+0xd2>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001f20:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <SystemInit+0xe8>)
 8001f22:	6811      	ldr	r1, [r2, #0]
 8001f24:	f041 0110 	orr.w	r1, r1, #16
 8001f28:	6011      	str	r1, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001f2a:	6811      	ldr	r1, [r2, #0]
 8001f2c:	f021 0103 	bic.w	r1, r1, #3
 8001f30:	6011      	str	r1, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001f32:	6811      	ldr	r1, [r2, #0]
 8001f34:	f041 0102 	orr.w	r1, r1, #2
 8001f38:	6011      	str	r1, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f48:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001f50:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8001f58:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001f60:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	0192      	lsls	r2, r2, #6
 8001f66:	d5fc      	bpl.n	8001f62 <SystemInit+0xb2>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	f022 0203 	bic.w	r2, r2, #3
 8001f6e:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	f042 0202 	orr.w	r2, r2, #2
 8001f76:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	f002 020c 	and.w	r2, r2, #12
 8001f7e:	2a08      	cmp	r2, #8
 8001f80:	d1fa      	bne.n	8001f78 <SystemInit+0xc8>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <SystemInit+0xec>)
 8001f88:	609a      	str	r2, [r3, #8]
}
 8001f8a:	b002      	add	sp, #8
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	f8ff0000 	.word	0xf8ff0000
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
 8001fa0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fa2:	e003      	b.n	8001fac <LoopCopyDataInit>

08001fa4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
 8001fa6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fa8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001faa:	3104      	adds	r1, #4

08001fac <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 8001fac:	4809      	ldr	r0, [pc, #36]	; (8001fd4 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
 8001fb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001fb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001fb4:	d3f6      	bcc.n	8001fa4 <CopyDataInit>
	ldr	r2, =_sbss
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
 8001fb8:	e002      	b.n	8001fc0 <LoopFillZerobss>

08001fba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
 8001fba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fbc:	f842 3b04 	str.w	r3, [r2], #4

08001fc0 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <LoopFillZerobss+0x20>)
	cmp	r2, r3
 8001fc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fc4:	d3f9      	bcc.n	8001fba <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
 8001fc6:	f7ff ff73 	bl	8001eb0 <SystemInit>
/* Call the application's entry point.*/
	bl	main
 8001fca:	f7fe f8f7 	bl	80001bc <main>
	bx	lr    
 8001fce:	4770      	bx	lr
	ldr	r3, =_sidata
 8001fd0:	080020a0 	.word	0x080020a0
	ldr	r0, =_sdata
 8001fd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fd8:	200000e8 	.word	0x200000e8
	ldr	r2, =_sbss
 8001fdc:	200000e8 	.word	0x200000e8
	ldr	r3, = _ebss
 8001fe0:	200001f0 	.word	0x200001f0

08001fe4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC1_2_IRQHandler>

08001fe6 <Virtual_Com_Port_ConfigDescriptor>:
 8001fe6:	0209 0043 0102 c000 0932 0004 0100 0202     ..C.....2.......
 8001ff6:	0001 2405 1000 0501 0124 0100 2404 0202     ...$....$....$..
 8002006:	2405 0006 0701 8205 0803 ff00 0409 0001     .$..............
 8002016:	0a02 0000 0700 0305 4002 0000 0507 0281     .........@......
 8002026:	0040                                         @..

08002029 <Virtual_Com_Port_DeviceDescriptor>:
 8002029:	0112 0200 0002 4000 0483 5740 0200 0201     .......@..@W....
 8002039:	0103                                        ..

0800203b <Virtual_Com_Port_StringLangID>:
 800203b:	0304 0409                                   ....

0800203f <Virtual_Com_Port_StringProduct>:
 800203f:	0332 0053 0054 004d 0033 0032 0020 0056     2.S.T.M.3.2. .V.
 800204f:	0069 0072 0074 0075 0061 006c 0020 0043     i.r.t.u.a.l. .C.
 800205f:	004f 004d 0020 0050 006f 0072 0074 0020     O.M. .P.o.r.t. .
 800206f:	0020                                         .

08002071 <Virtual_Com_Port_StringVendor>:
 8002071:	0326 0053 0054 004d 0069 0063 0072 006f     &.S.T.M.i.c.r.o.
 8002081:	0065 006c 0065 0063 0074 0072 006f 006e     e.l.e.c.t.r.o.n.
 8002091:	0069 0063 0073                              i.c.s.

Disassembly of section .init:

08002098 <_init>:
 8002098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209a:	bf00      	nop

Disassembly of section .fini:

0800209c <_fini>:
 800209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209e:	bf00      	nop
